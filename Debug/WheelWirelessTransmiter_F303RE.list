
WheelWirelessTransmiter_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006398  08006398  00016398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e0  080063e0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080063e0  080063e0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063e0  080063e0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
 10 .bss          00000304  2000003c  2000003c  0002003c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  0002003c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a91  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c4d  00000000  00000000  00032b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001020  00000000  00000000  00035790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c89  00000000  00000000  000367b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021eba  00000000  00000000  00037439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000163bb  00000000  00000000  000592f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccb2e  00000000  00000000  0006f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004228  00000000  00000000  0013c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00140404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006380 	.word	0x08006380

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08006380 	.word	0x08006380

080001d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001da:	4b1e      	ldr	r3, [pc, #120]	; (8000254 <MX_DMA_Init+0x80>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a1d      	ldr	r2, [pc, #116]	; (8000254 <MX_DMA_Init+0x80>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <MX_DMA_Init+0x80>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80001f2:	4b18      	ldr	r3, [pc, #96]	; (8000254 <MX_DMA_Init+0x80>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a17      	ldr	r2, [pc, #92]	; (8000254 <MX_DMA_Init+0x80>)
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6153      	str	r3, [r2, #20]
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <MX_DMA_Init+0x80>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	f003 0302 	and.w	r3, r3, #2
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800020a:	2200      	movs	r2, #0
 800020c:	2100      	movs	r1, #0
 800020e:	200e      	movs	r0, #14
 8000210:	f001 fa53 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000214:	200e      	movs	r0, #14
 8000216:	f001 fa6c 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	200f      	movs	r0, #15
 8000220:	f001 fa4b 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000224:	200f      	movs	r0, #15
 8000226:	f001 fa64 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	2100      	movs	r1, #0
 800022e:	2038      	movs	r0, #56	; 0x38
 8000230:	f001 fa43 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000234:	2038      	movs	r0, #56	; 0x38
 8000236:	f001 fa5c 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	2039      	movs	r0, #57	; 0x39
 8000240:	f001 fa3b 	bl	80016ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000244:	2039      	movs	r0, #57	; 0x39
 8000246:	f001 fa54 	bl	80016f2 <HAL_NVIC_EnableIRQ>

}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08a      	sub	sp, #40	; 0x28
 800025c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800026e:	4b4b      	ldr	r3, [pc, #300]	; (800039c <MX_GPIO_Init+0x144>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a4a      	ldr	r2, [pc, #296]	; (800039c <MX_GPIO_Init+0x144>)
 8000274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b48      	ldr	r3, [pc, #288]	; (800039c <MX_GPIO_Init+0x144>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000282:	613b      	str	r3, [r7, #16]
 8000284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000286:	4b45      	ldr	r3, [pc, #276]	; (800039c <MX_GPIO_Init+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a44      	ldr	r2, [pc, #272]	; (800039c <MX_GPIO_Init+0x144>)
 800028c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000290:	6153      	str	r3, [r2, #20]
 8000292:	4b42      	ldr	r3, [pc, #264]	; (800039c <MX_GPIO_Init+0x144>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b3f      	ldr	r3, [pc, #252]	; (800039c <MX_GPIO_Init+0x144>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a3e      	ldr	r2, [pc, #248]	; (800039c <MX_GPIO_Init+0x144>)
 80002a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a8:	6153      	str	r3, [r2, #20]
 80002aa:	4b3c      	ldr	r3, [pc, #240]	; (800039c <MX_GPIO_Init+0x144>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b6:	4b39      	ldr	r3, [pc, #228]	; (800039c <MX_GPIO_Init+0x144>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	4a38      	ldr	r2, [pc, #224]	; (800039c <MX_GPIO_Init+0x144>)
 80002bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002c0:	6153      	str	r3, [r2, #20]
 80002c2:	4b36      	ldr	r3, [pc, #216]	; (800039c <MX_GPIO_Init+0x144>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ce:	4b33      	ldr	r3, [pc, #204]	; (800039c <MX_GPIO_Init+0x144>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a32      	ldr	r2, [pc, #200]	; (800039c <MX_GPIO_Init+0x144>)
 80002d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d8:	6153      	str	r3, [r2, #20]
 80002da:	4b30      	ldr	r3, [pc, #192]	; (800039c <MX_GPIO_Init+0x144>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2120      	movs	r1, #32
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f001 fd09 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CE_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2106      	movs	r1, #6
 80002f6:	482a      	ldr	r0, [pc, #168]	; (80003a0 <MX_GPIO_Init+0x148>)
 80002f8:	f001 fd04 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2104      	movs	r1, #4
 8000300:	4828      	ldr	r0, [pc, #160]	; (80003a4 <MX_GPIO_Init+0x14c>)
 8000302:	f001 fcff 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800030c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	4822      	ldr	r0, [pc, #136]	; (80003a8 <MX_GPIO_Init+0x150>)
 800031e:	f001 fb67 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000322:	2320      	movs	r3, #32
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2300      	movs	r3, #0
 8000330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000332:	f107 0314 	add.w	r3, r7, #20
 8000336:	4619      	mov	r1, r3
 8000338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033c:	f001 fb58 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CE_Pin|SPI2_CS_Pin;
 8000340:	2306      	movs	r3, #6
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800034c:	2303      	movs	r3, #3
 800034e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	4619      	mov	r1, r3
 8000356:	4812      	ldr	r0, [pc, #72]	; (80003a0 <MX_GPIO_Init+0x148>)
 8000358:	f001 fb4a 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800035c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000362:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	4619      	mov	r1, r3
 8000372:	480b      	ldr	r0, [pc, #44]	; (80003a0 <MX_GPIO_Init+0x148>)
 8000374:	f001 fb3c 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000378:	2304      	movs	r3, #4
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000384:	2303      	movs	r3, #3
 8000386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4619      	mov	r1, r3
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_GPIO_Init+0x14c>)
 8000390:	f001 fb2e 	bl	80019f0 <HAL_GPIO_Init>

}
 8000394:	bf00      	nop
 8000396:	3728      	adds	r7, #40	; 0x28
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	40021000 	.word	0x40021000
 80003a0:	48000400 	.word	0x48000400
 80003a4:	48000c00 	.word	0x48000c00
 80003a8:	48000800 	.word	0x48000800

080003ac <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	7f1b      	ldrb	r3, [r3, #28]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d106      	bne.n	80003ca <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80003bc:	2100      	movs	r1, #0
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f004 ff3c 	bl	800523c <HAL_TIM_ReadCapturedValue>
 80003c4:	4603      	mov	r3, r0
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <HAL_TIM_IC_CaptureCallback+0x64>)
 80003c8:	6013      	str	r3, [r2, #0]
	}
	if(ICValue != 0)
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <HAL_TIM_IC_CaptureCallback+0x64>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d01a      	beq.n	8000408 <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		Duty = (HAL_TIM_ReadCapturedValue(htim,  TIM_CHANNEL_2)*2000)/ICValue;
 80003d2:	2104      	movs	r1, #4
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f004 ff31 	bl	800523c <HAL_TIM_ReadCapturedValue>
 80003da:	4603      	mov	r3, r0
 80003dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003e0:	fb03 f202 	mul.w	r2, r3, r2
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_TIM_IC_CaptureCallback+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ec:	ee07 3a90 	vmov	s15, r3
 80003f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_TIM_IC_CaptureCallback+0x68>)
 80003f6:	edc3 7a00 	vstr	s15, [r3]
		Frequency = 72000000/ICValue;
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_TIM_IC_CaptureCallback+0x64>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a06      	ldr	r2, [pc, #24]	; (8000418 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000400:	fbb2 f3f3 	udiv	r3, r2, r3
 8000404:	4a05      	ldr	r2, [pc, #20]	; (800041c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000406:	6013      	str	r3, [r2, #0]
	}
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000078 	.word	0x20000078
 8000414:	20000080 	.word	0x20000080
 8000418:	044aa200 	.word	0x044aa200
 800041c:	2000007c 	.word	0x2000007c

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000426:	f000 ffe3 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800042a:	f000 f8cf 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042e:	f7ff ff13 	bl	8000258 <MX_GPIO_Init>
  MX_DMA_Init();
 8000432:	f7ff fecf 	bl	80001d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000436:	f000 fd4f 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800043a:	f000 fa4f 	bl	80008dc <MX_SPI3_Init>
  MX_SPI2_Init();
 800043e:	f000 fa0f 	bl	8000860 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000442:	f000 fc63 	bl	8000d0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000446:	f000 ff47 	bl	80012d8 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 800044a:	210a      	movs	r1, #10
 800044c:	4852      	ldr	r0, [pc, #328]	; (8000598 <main+0x178>)
 800044e:	f000 ff6a 	bl	8001326 <NRF24_TxMode>
  AS5048A_Init(&hspi3);
 8000452:	4852      	ldr	r0, [pc, #328]	; (800059c <main+0x17c>)
 8000454:	f000 fddc 	bl	8001010 <AS5048A_Init>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000458:	2100      	movs	r1, #0
 800045a:	4851      	ldr	r0, [pc, #324]	; (80005a0 <main+0x180>)
 800045c:	f004 fafa 	bl	8004a54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000460:	2104      	movs	r1, #4
 8000462:	484f      	ldr	r0, [pc, #316]	; (80005a0 <main+0x180>)
 8000464:	f004 f9fa 	bl	800485c <HAL_TIM_IC_Start>
  uint32_t last_tick = HAL_GetTick();
 8000468:	f001 f81c 	bl	80014a4 <HAL_GetTick>
 800046c:	60f8      	str	r0, [r7, #12]
  uint32_t last_tick1 = HAL_GetTick();
 800046e:	f001 f819 	bl	80014a4 <HAL_GetTick>
 8000472:	60b8      	str	r0, [r7, #8]
  uint32_t last_tick2 = HAL_GetTick();
 8000474:	f001 f816 	bl	80014a4 <HAL_GetTick>
 8000478:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - last_tick >= 5)
 800047a:	f001 f813 	bl	80014a4 <HAL_GetTick>
 800047e:	4602      	mov	r2, r0
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	2b04      	cmp	r3, #4
 8000486:	d926      	bls.n	80004d6 <main+0xb6>
	  {
		  last_tick = HAL_GetTick();
 8000488:	f001 f80c 	bl	80014a4 <HAL_GetTick>
 800048c:	60f8      	str	r0, [r7, #12]
		  if (direction == 1) {
 800048e:	4b45      	ldr	r3, [pc, #276]	; (80005a4 <main+0x184>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d10e      	bne.n	80004b4 <main+0x94>
					value++;
 8000496:	4b44      	ldr	r3, [pc, #272]	; (80005a8 <main+0x188>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	3301      	adds	r3, #1
 800049c:	b29a      	uxth	r2, r3
 800049e:	4b42      	ldr	r3, [pc, #264]	; (80005a8 <main+0x188>)
 80004a0:	801a      	strh	r2, [r3, #0]
					if (value >= 1800) {
 80004a2:	4b41      	ldr	r3, [pc, #260]	; (80005a8 <main+0x188>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80004aa:	d310      	bcc.n	80004ce <main+0xae>
						direction = -1;
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <main+0x184>)
 80004ae:	22ff      	movs	r2, #255	; 0xff
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e00c      	b.n	80004ce <main+0xae>
					}
				}
				else {
					value--;
 80004b4:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <main+0x188>)
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	3b01      	subs	r3, #1
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <main+0x188>)
 80004be:	801a      	strh	r2, [r3, #0]
					if (value <= 170) {
 80004c0:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <main+0x188>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2baa      	cmp	r3, #170	; 0xaa
 80004c6:	d802      	bhi.n	80004ce <main+0xae>
						direction = 1;
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <main+0x184>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
					}
				}
				input16[0] = value;
 80004ce:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <main+0x188>)
 80004d0:	881a      	ldrh	r2, [r3, #0]
 80004d2:	4b36      	ldr	r3, [pc, #216]	; (80005ac <main+0x18c>)
 80004d4:	801a      	strh	r2, [r3, #0]
	  }
	  	//uint16_t position = AS5048A_GetRaw();
	  	//input16[1] = map_position_to_sbus(position);
	  	//input16[1] = map_pwm_to_sbus(Duty);
	  	//input16[1] = angular_velocity;
		if (HAL_GetTick() - last_tick1 >= 10)
 80004d6:	f000 ffe5 	bl	80014a4 <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	2b09      	cmp	r3, #9
 80004e2:	d946      	bls.n	8000572 <main+0x152>
		{
			last_tick1 = HAL_GetTick();
 80004e4:	f000 ffde 	bl	80014a4 <HAL_GetTick>
 80004e8:	60b8      	str	r0, [r7, #8]
			position = Duty;
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <main+0x190>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a31      	ldr	r2, [pc, #196]	; (80005b4 <main+0x194>)
 80004f0:	6013      	str	r3, [r2, #0]
			if (fabs(position - last_position) > dead_band)
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <main+0x194>)
 80004f4:	ed93 7a00 	vldr	s14, [r3]
 80004f8:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <main+0x198>)
 80004fa:	edd3 7a00 	vldr	s15, [r3]
 80004fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000502:	eef0 7ae7 	vabs.f32	s15, s15
 8000506:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800050a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000512:	dd21      	ble.n	8000558 <main+0x138>
			{
				speed = CalculateAngularSpeed(position, last_position, 0.01f); // 10 ms
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <main+0x194>)
 8000516:	edd3 7a00 	vldr	s15, [r3]
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <main+0x198>)
 800051c:	ed93 7a00 	vldr	s14, [r3]
 8000520:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80005bc <main+0x19c>
 8000524:	eef0 0a47 	vmov.f32	s1, s14
 8000528:	eeb0 0a67 	vmov.f32	s0, s15
 800052c:	f000 f8e0 	bl	80006f0 <CalculateAngularSpeed>
 8000530:	eef0 7a40 	vmov.f32	s15, s0
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <main+0x1a0>)
 8000536:	edc3 7a00 	vstr	s15, [r3]
				last_position = position;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <main+0x194>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a1e      	ldr	r2, [pc, #120]	; (80005b8 <main+0x198>)
 8000540:	6013      	str	r3, [r2, #0]
				input16[1] = (uint16_t)speed;
 8000542:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <main+0x1a0>)
 8000544:	edd3 7a00 	vldr	s15, [r3]
 8000548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800054c:	ee17 3a90 	vmov	r3, s15
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0x18c>)
 8000554:	805a      	strh	r2, [r3, #2]
 8000556:	e00c      	b.n	8000572 <main+0x152>
			}
			else
			{
				speed = 1023;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <main+0x1a0>)
 800055a:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <main+0x1a4>)
 800055c:	601a      	str	r2, [r3, #0]
				input16[1] = (uint16_t)speed;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <main+0x1a0>)
 8000560:	edd3 7a00 	vldr	s15, [r3]
 8000564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000568:	ee17 3a90 	vmov	r3, s15
 800056c:	b29a      	uxth	r2, r3
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0x18c>)
 8000570:	805a      	strh	r2, [r3, #2]
			}
		}

		if (HAL_GetTick() - last_tick2 >= 10)
 8000572:	f000 ff97 	bl	80014a4 <HAL_GetTick>
 8000576:	4602      	mov	r2, r0
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	2b09      	cmp	r3, #9
 800057e:	f67f af7c 	bls.w	800047a <main+0x5a>
		{
			last_tick2 = HAL_GetTick();
 8000582:	f000 ff8f 	bl	80014a4 <HAL_GetTick>
 8000586:	6078      	str	r0, [r7, #4]
			convert16to8(input16, output8);
 8000588:	490f      	ldr	r1, [pc, #60]	; (80005c8 <main+0x1a8>)
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <main+0x18c>)
 800058c:	f000 f880 	bl	8000690 <convert16to8>
			NRF24_Transmit(output8);
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x1a8>)
 8000592:	f000 feef 	bl	8001374 <NRF24_Transmit>
	  if (HAL_GetTick() - last_tick >= 5)
 8000596:	e770      	b.n	800047a <main+0x5a>
 8000598:	20000000 	.word	0x20000000
 800059c:	200000f0 	.word	0x200000f0
 80005a0:	20000264 	.word	0x20000264
 80005a4:	2000002a 	.word	0x2000002a
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000080 	.word	0x20000080
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000088 	.word	0x20000088
 80005bc:	3c23d70a 	.word	0x3c23d70a
 80005c0:	2000002c 	.word	0x2000002c
 80005c4:	447fc000 	.word	0x447fc000
 80005c8:	20000058 	.word	0x20000058

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0a6      	sub	sp, #152	; 0x98
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d6:	2228      	movs	r2, #40	; 0x28
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fea3 	bl	8006326 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2258      	movs	r2, #88	; 0x58
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fe95 	bl	8006326 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000618:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800061c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fb82 	bl	8001d34 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000636:	f000 f90d 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fbc0 	bl	8002ddc <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 f8f7 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <SystemClock_Config+0xc0>)
 8000668:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fdd1 	bl	800321c <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000680:	f000 f8e8 	bl	8000854 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3798      	adds	r7, #152	; 0x98
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	00100002 	.word	0x00100002

08000690 <convert16to8>:

/* USER CODE BEGIN 4 */

void convert16to8(const uint16_t *input16, uint8_t *output8) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 16; ++i) {
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e01c      	b.n	80006da <convert16to8+0x4a>
        output8[2 * i] = (uint8_t)(input16[i] & 0x00FF);      // Dolny bajt
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	881a      	ldrh	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	440b      	add	r3, r1
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	701a      	strb	r2, [r3, #0]
        output8[2 * i + 1] = (uint8_t)((input16[i] >> 8) & 0x00FF);  // Górny bajt
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b299      	uxth	r1, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	3301      	adds	r3, #1
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	b2ca      	uxtb	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	dddf      	ble.n	80006a0 <convert16to8+0x10>
    }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <CalculateAngularSpeed>:

    // Zwrócenie zmiennej sbus jako uint16_t
    return (uint16_t)sbus;
}

float CalculateAngularSpeed(float current_position, float last_position, float delta_time) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80006fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80006fe:	ed87 1a01 	vstr	s2, [r7, #4]
    float delta_position = current_position - last_position;
 8000702:	ed97 7a03 	vldr	s14, [r7, #12]
 8000706:	edd7 7a02 	vldr	s15, [r7, #8]
 800070a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800070e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (delta_position > (max_position / 2)) {
 8000712:	eddf 6a32 	vldr	s13, [pc, #200]	; 80007dc <CalculateAngularSpeed+0xec>
 8000716:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800071a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072a:	dd08      	ble.n	800073e <CalculateAngularSpeed+0x4e>
        delta_position -= max_position;
 800072c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80007dc <CalculateAngularSpeed+0xec>
 8000730:	edd7 7a05 	vldr	s15, [r7, #20]
 8000734:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000738:	edc7 7a05 	vstr	s15, [r7, #20]
 800073c:	e016      	b.n	800076c <CalculateAngularSpeed+0x7c>
    } else if (delta_position < -(max_position / 2)) {
 800073e:	eddf 6a27 	vldr	s13, [pc, #156]	; 80007dc <CalculateAngularSpeed+0xec>
 8000742:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800074a:	eef1 7a67 	vneg.f32	s15, s15
 800074e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d507      	bpl.n	800076c <CalculateAngularSpeed+0x7c>
        delta_position += max_position;
 800075c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80007dc <CalculateAngularSpeed+0xec>
 8000760:	edd7 7a05 	vldr	s15, [r7, #20]
 8000764:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000768:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // Obliczenie prędkości kątowej
    float speed = delta_position / delta_time;
 800076c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000770:	ed97 7a01 	vldr	s14, [r7, #4]
 8000774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000778:	edc7 7a04 	vstr	s15, [r7, #16]

    // Ustaw prędkość zgodnie z kierunkiem zmiany position
    if (speed > 0) {
 800077c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000780:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	dd10      	ble.n	80007ac <CalculateAngularSpeed+0xbc>
    	return map(speed, 0, max_speed, 1024, 1792);
 800078a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80007e0 <CalculateAngularSpeed+0xf0>
 800078e:	ed9f 2a15 	vldr	s4, [pc, #84]	; 80007e4 <CalculateAngularSpeed+0xf4>
 8000792:	eddf 1a15 	vldr	s3, [pc, #84]	; 80007e8 <CalculateAngularSpeed+0xf8>
 8000796:	eeb0 1a67 	vmov.f32	s2, s15
 800079a:	eddf 0a14 	vldr	s1, [pc, #80]	; 80007ec <CalculateAngularSpeed+0xfc>
 800079e:	ed97 0a04 	vldr	s0, [r7, #16]
 80007a2:	f000 f829 	bl	80007f8 <map>
 80007a6:	eef0 7a40 	vmov.f32	s15, s0
 80007aa:	e011      	b.n	80007d0 <CalculateAngularSpeed+0xe0>
    } else {
    	return map(speed, -max_speed, 0, 192, 1022);
 80007ac:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80007e0 <CalculateAngularSpeed+0xf0>
 80007b0:	eef1 7a67 	vneg.f32	s15, s15
 80007b4:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 80007f0 <CalculateAngularSpeed+0x100>
 80007b8:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80007f4 <CalculateAngularSpeed+0x104>
 80007bc:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80007ec <CalculateAngularSpeed+0xfc>
 80007c0:	eef0 0a67 	vmov.f32	s1, s15
 80007c4:	ed97 0a04 	vldr	s0, [r7, #16]
 80007c8:	f000 f816 	bl	80007f8 <map>
 80007cc:	eef0 7a40 	vmov.f32	s15, s0
    }
}
 80007d0:	eeb0 0a67 	vmov.f32	s0, s15
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	44fa0000 	.word	0x44fa0000
 80007e0:	47023555 	.word	0x47023555
 80007e4:	44e00000 	.word	0x44e00000
 80007e8:	44800000 	.word	0x44800000
 80007ec:	00000000 	.word	0x00000000
 80007f0:	447f8000 	.word	0x447f8000
 80007f4:	43400000 	.word	0x43400000

080007f8 <map>:


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8000802:	edc7 0a04 	vstr	s1, [r7, #16]
 8000806:	ed87 1a03 	vstr	s2, [r7, #12]
 800080a:	edc7 1a02 	vstr	s3, [r7, #8]
 800080e:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000812:	ed97 7a05 	vldr	s14, [r7, #20]
 8000816:	edd7 7a04 	vldr	s15, [r7, #16]
 800081a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800081e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000822:	edd7 7a02 	vldr	s15, [r7, #8]
 8000826:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800082a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800082e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000832:	edd7 7a04 	vldr	s15, [r7, #16]
 8000836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800083a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800083e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000842:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_SPI2_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_SPI2_Init+0x74>)
 800086c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI2_Init+0x74>)
 800087a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI2_Init+0x74>)
 800088e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000892:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI2_Init+0x74>)
 8000896:	2210      	movs	r2, #16
 8000898:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI2_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SPI2_Init+0x74>)
 80008c0:	f002 feca 	bl	8003658 <HAL_SPI_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f7ff ffc3 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	40003800 	.word	0x40003800

080008dc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_SPI3_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_SPI3_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_SPI3_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_SPI3_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI3_Init+0x74>)
 80008f6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80008fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_SPI3_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI3_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI3_Init+0x74>)
 8000912:	2210      	movs	r2, #16
 8000914:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SPI3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI3_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SPI3_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI3_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_SPI3_Init+0x74>)
 800093c:	f002 fe8c 	bl	8003658 <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000946:	f7ff ff85 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000f0 	.word	0x200000f0
 8000954:	40003c00 	.word	0x40003c00

08000958 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a85      	ldr	r2, [pc, #532]	; (8000b8c <HAL_SPI_MspInit+0x234>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d17d      	bne.n	8000a76 <HAL_SPI_MspInit+0x11e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800097a:	4b85      	ldr	r3, [pc, #532]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a84      	ldr	r2, [pc, #528]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	61d3      	str	r3, [r2, #28]
 8000986:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b7f      	ldr	r3, [pc, #508]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4a7e      	ldr	r2, [pc, #504]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800099c:	6153      	str	r3, [r2, #20]
 800099e:	4b7c      	ldr	r3, [pc, #496]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009bc:	2305      	movs	r3, #5
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4873      	ldr	r0, [pc, #460]	; (8000b94 <HAL_SPI_MspInit+0x23c>)
 80009c8:	f001 f812 	bl	80019f0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80009cc:	4b72      	ldr	r3, [pc, #456]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009ce:	4a73      	ldr	r2, [pc, #460]	; (8000b9c <HAL_SPI_MspInit+0x244>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d2:	4b71      	ldr	r3, [pc, #452]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009d4:	2210      	movs	r2, #16
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d8:	4b6f      	ldr	r3, [pc, #444]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009de:	4b6e      	ldr	r3, [pc, #440]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009e4:	4b6c      	ldr	r3, [pc, #432]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ea:	4b6b      	ldr	r3, [pc, #428]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009f0:	4b69      	ldr	r3, [pc, #420]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009f6:	4b68      	ldr	r3, [pc, #416]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009fc:	4866      	ldr	r0, [pc, #408]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 80009fe:	f000 fe92 	bl	8001726 <HAL_DMA_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8000a08:	f7ff ff24 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a62      	ldr	r2, [pc, #392]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 8000a10:	655a      	str	r2, [r3, #84]	; 0x54
 8000a12:	4a61      	ldr	r2, [pc, #388]	; (8000b98 <HAL_SPI_MspInit+0x240>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000a18:	4b61      	ldr	r3, [pc, #388]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a1a:	4a62      	ldr	r2, [pc, #392]	; (8000ba4 <HAL_SPI_MspInit+0x24c>)
 8000a1c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1e:	4b60      	ldr	r3, [pc, #384]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a24:	4b5e      	ldr	r3, [pc, #376]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a30:	4b5b      	ldr	r3, [pc, #364]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a36:	4b5a      	ldr	r3, [pc, #360]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000a3c:	4b58      	ldr	r3, [pc, #352]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	4b57      	ldr	r3, [pc, #348]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000a48:	4855      	ldr	r0, [pc, #340]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a4a:	f000 fe6c 	bl	8001726 <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8000a54:	f7ff fefe 	bl	8000854 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a51      	ldr	r2, [pc, #324]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8000a5e:	4a50      	ldr	r2, [pc, #320]	; (8000ba0 <HAL_SPI_MspInit+0x248>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	2024      	movs	r0, #36	; 0x24
 8000a6a:	f000 fe26 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a6e:	2024      	movs	r0, #36	; 0x24
 8000a70:	f000 fe3f 	bl	80016f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a74:	e086      	b.n	8000b84 <HAL_SPI_MspInit+0x22c>
  else if(spiHandle->Instance==SPI3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ba8 <HAL_SPI_MspInit+0x250>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	f040 8081 	bne.w	8000b84 <HAL_SPI_MspInit+0x22c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a82:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a42      	ldr	r2, [pc, #264]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000aa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <HAL_SPI_MspInit+0x238>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ab2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac4:	2306      	movs	r3, #6
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	4837      	ldr	r0, [pc, #220]	; (8000bac <HAL_SPI_MspInit+0x254>)
 8000ad0:	f000 ff8e 	bl	80019f0 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000ad6:	4a37      	ldr	r2, [pc, #220]	; (8000bb4 <HAL_SPI_MspInit+0x25c>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aec:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000afa:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8000afc:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000b08:	4829      	ldr	r0, [pc, #164]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000b0a:	f000 fe0c 	bl	8001726 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_SPI_MspInit+0x1c0>
      Error_Handler();
 8000b14:	f7ff fe9e 	bl	8000854 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <HAL_SPI_MspInit+0x258>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b26:	4a25      	ldr	r2, [pc, #148]	; (8000bbc <HAL_SPI_MspInit+0x264>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b4a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b52:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000b58:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b5a:	f000 fde4 	bl	8001726 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_SPI_MspInit+0x210>
      Error_Handler();
 8000b64:	f7ff fe76 	bl	8000854 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b6c:	655a      	str	r2, [r3, #84]	; 0x54
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <HAL_SPI_MspInit+0x260>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2033      	movs	r0, #51	; 0x33
 8000b7a:	f000 fd9e 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000b7e:	2033      	movs	r0, #51	; 0x33
 8000b80:	f000 fdb7 	bl	80016f2 <HAL_NVIC_EnableIRQ>
}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40003800 	.word	0x40003800
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	20000154 	.word	0x20000154
 8000b9c:	40020058 	.word	0x40020058
 8000ba0:	20000198 	.word	0x20000198
 8000ba4:	40020044 	.word	0x40020044
 8000ba8:	40003c00 	.word	0x40003c00
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	200001dc 	.word	0x200001dc
 8000bb4:	40020408 	.word	0x40020408
 8000bb8:	20000220 	.word	0x20000220
 8000bbc:	4002041c 	.word	0x4002041c

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_MspInit+0x44>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_MspInit+0x44>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_MspInit+0x44>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x44>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x44>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x44>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 fd54 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 fc12 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA1_Channel4_IRQHandler+0x10>)
 8000c62:	f000 fde5 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000198 	.word	0x20000198

08000c70 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <DMA1_Channel5_IRQHandler+0x10>)
 8000c76:	f000 fddb 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000154 	.word	0x20000154

08000c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM2_IRQHandler+0x10>)
 8000c8a:	f004 f82d 	bl	8004ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000264 	.word	0x20000264

08000c98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <SPI2_IRQHandler+0x10>)
 8000c9e:	f003 fa55 	bl	800414c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000008c 	.word	0x2000008c

08000cac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <SPI3_IRQHandler+0x10>)
 8000cb2:	f003 fa4b 	bl	800414c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000f0 	.word	0x200000f0

08000cc0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA2_Channel1_IRQHandler+0x10>)
 8000cc6:	f000 fdb3 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001dc 	.word	0x200001dc

08000cd4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA2_Channel2_IRQHandler+0x10>)
 8000cda:	f000 fda9 	bl	8001830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000220 	.word	0x20000220

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	; 0x40
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d48:	4b3e      	ldr	r3, [pc, #248]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d70:	4834      	ldr	r0, [pc, #208]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d72:	f003 fcbb 	bl	80046ec <HAL_TIM_Base_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d7c:	f7ff fd6a 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d84:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	482d      	ldr	r0, [pc, #180]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d8e:	f004 f949 	bl	8005024 <HAL_TIM_ConfigClockSource>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d98:	f7ff fd5c 	bl	8000854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d9c:	4829      	ldr	r0, [pc, #164]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000d9e:	f003 fcfc 	bl	800479a <HAL_TIM_IC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000da8:	f7ff fd54 	bl	8000854 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dac:	2304      	movs	r3, #4
 8000dae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000db0:	2350      	movs	r3, #80	; 0x50
 8000db2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481f      	ldr	r0, [pc, #124]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000dc8:	f004 f9f5 	bl	80051b6 <HAL_TIM_SlaveConfigSynchro>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000dd2:	f7ff fd3f 	bl	8000854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	2200      	movs	r2, #0
 8000dec:	4619      	mov	r1, r3
 8000dee:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000df0:	f004 f87c 	bl	8004eec <HAL_TIM_IC_ConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000dfa:	f7ff fd2b 	bl	8000854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000e10:	f004 f86c 	bl	8004eec <HAL_TIM_IC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000e1a:	f7ff fd1b 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM2_Init+0x138>)
 8000e2c:	f004 fd94 	bl	8005958 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8000e36:	f7ff fd0d 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3740      	adds	r7, #64	; 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000264 	.word	0x20000264

08000e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e68:	d130      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_TIM_Base_MspInit+0x8c>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 fd9a 	bl	80019f0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	201c      	movs	r0, #28
 8000ec2:	f000 fbfa 	bl	80016ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec6:	201c      	movs	r0, #28
 8000ec8:	f000 fc13 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <MX_USART2_UART_Init+0x5c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f1c:	f004 fdc6 	bl	8005aac <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f26:	f7ff fc95 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200002b0 	.word	0x200002b0
 8000f34:	40004400 	.word	0x40004400

08000f38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	6153      	str	r3, [r2, #20]
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_UART_MspInit+0x80>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f000 fd22 	bl	80019f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40021000 	.word	0x40021000

08000fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff fe92 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f005 f9a5 	bl	8006338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fee:	f7ff fa17 	bl	8000420 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ff4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001000:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8001004:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001008:	20000340 	.word	0x20000340

0800100c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC1_2_IRQHandler>
	...

08001010 <AS5048A_Init>:
SPI_HandleTypeDef *spiDef;
uint16_t TX[4] = { 0 };
uint16_t RX[4] = { 0 };
uint16_t post_process_value;

void AS5048A_Init(SPI_HandleTypeDef *handle) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	spiDef = handle;
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <AS5048A_Init+0x1c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000338 	.word	0x20000338

08001030 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_2


void CS_Select (void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2104      	movs	r1, #4
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <CS_Select+0x14>)
 800103a:	f000 fe63 	bl	8001d04 <HAL_GPIO_WritePin>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	48000400 	.word	0x48000400

08001048 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	2104      	movs	r1, #4
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <CS_UnSelect+0x14>)
 8001052:	f000 fe57 	bl	8001d04 <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	48000400 	.word	0x48000400

08001060 <CE_Enable>:


void CE_Enable (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2102      	movs	r1, #2
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <CE_Enable+0x14>)
 800106a:	f000 fe4b 	bl	8001d04 <HAL_GPIO_WritePin>
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	48000400 	.word	0x48000400

08001078 <CE_Disable>:

void CE_Disable (void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2102      	movs	r1, #2
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <CE_Disable+0x14>)
 8001082:	f000 fe3f 	bl	8001d04 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	48000400 	.word	0x48000400

08001090 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ae:	f7ff ffbf 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80010b2:	f107 010c 	add.w	r1, r7, #12
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	2202      	movs	r2, #2
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <nrf24_WriteReg+0x40>)
 80010be:	f002 fb76 	bl	80037ae <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80010c2:	f7ff ffc1 	bl	8001048 <CS_UnSelect>
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000008c 	.word	0x2000008c

080010d4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0320 	orr.w	r3, r3, #32
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80010ec:	f7ff ffa0 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80010f0:	f107 0114 	add.w	r1, r7, #20
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <nrf24_WriteRegMulti+0x48>)
 80010fa:	f002 fb58 	bl	80037ae <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b29a      	uxth	r2, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <nrf24_WriteRegMulti+0x48>)
 800110a:	f002 fb50 	bl	80037ae <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110e:	f7ff ff9b 	bl	8001048 <CS_UnSelect>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000008c 	.word	0x2000008c

08001120 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800112e:	f7ff ff7f 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001132:	1df9      	adds	r1, r7, #7
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	2201      	movs	r2, #1
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <nrf24_ReadReg+0x3c>)
 800113a:	f002 fb38 	bl	80037ae <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800113e:	f107 010f 	add.w	r1, r7, #15
 8001142:	2364      	movs	r3, #100	; 0x64
 8001144:	2201      	movs	r2, #1
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <nrf24_ReadReg+0x3c>)
 8001148:	f002 fca6 	bl	8003a98 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800114c:	f7ff ff7c 	bl	8001048 <CS_UnSelect>

	return data;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000008c 	.word	0x2000008c

08001160 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800116a:	f7ff ff61 	bl	8001030 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	2201      	movs	r2, #1
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <nrfsendCmd+0x28>)
 8001176:	f002 fb1a 	bl	80037ae <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800117a:	f7ff ff65 	bl	8001048 <CS_UnSelect>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000008c 	.word	0x2000008c

0800118c <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d104      	bne.n	80011a6 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	2007      	movs	r0, #7
 80011a0:	f7ff ff76 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011a4:	e090      	b.n	80012c8 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b17      	cmp	r3, #23
 80011aa:	d104      	bne.n	80011b6 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80011ac:	2111      	movs	r1, #17
 80011ae:	2017      	movs	r0, #23
 80011b0:	f7ff ff6e 	bl	8001090 <nrf24_WriteReg>
}
 80011b4:	e088      	b.n	80012c8 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80011b6:	2108      	movs	r1, #8
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ff69 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80011be:	213f      	movs	r1, #63	; 0x3f
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff65 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80011c6:	2103      	movs	r1, #3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff ff61 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff ff5d 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80011d6:	2103      	movs	r1, #3
 80011d8:	2004      	movs	r0, #4
 80011da:	f7ff ff59 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80011de:	2102      	movs	r1, #2
 80011e0:	2005      	movs	r0, #5
 80011e2:	f7ff ff55 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80011e6:	210e      	movs	r1, #14
 80011e8:	2006      	movs	r0, #6
 80011ea:	f7ff ff51 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80011ee:	2100      	movs	r1, #0
 80011f0:	2007      	movs	r0, #7
 80011f2:	f7ff ff4d 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80011f6:	2100      	movs	r1, #0
 80011f8:	2008      	movs	r0, #8
 80011fa:	f7ff ff49 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80011fe:	2100      	movs	r1, #0
 8001200:	2009      	movs	r0, #9
 8001202:	f7ff ff45 	bl	8001090 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001206:	4a32      	ldr	r2, [pc, #200]	; (80012d0 <nrf24_reset+0x144>)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2205      	movs	r2, #5
 800121c:	4619      	mov	r1, r3
 800121e:	200a      	movs	r0, #10
 8001220:	f7ff ff58 	bl	80010d4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001224:	4a2b      	ldr	r2, [pc, #172]	; (80012d4 <nrf24_reset+0x148>)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122e:	6018      	str	r0, [r3, #0]
 8001230:	3304      	adds	r3, #4
 8001232:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2205      	movs	r2, #5
 800123a:	4619      	mov	r1, r3
 800123c:	200b      	movs	r0, #11
 800123e:	f7ff ff49 	bl	80010d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001242:	21c3      	movs	r1, #195	; 0xc3
 8001244:	200c      	movs	r0, #12
 8001246:	f7ff ff23 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 800124a:	21c4      	movs	r1, #196	; 0xc4
 800124c:	200d      	movs	r0, #13
 800124e:	f7ff ff1f 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001252:	21c5      	movs	r1, #197	; 0xc5
 8001254:	200e      	movs	r0, #14
 8001256:	f7ff ff1b 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 800125a:	21c6      	movs	r1, #198	; 0xc6
 800125c:	200f      	movs	r0, #15
 800125e:	f7ff ff17 	bl	8001090 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001262:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <nrf24_reset+0x144>)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	6018      	str	r0, [r3, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2205      	movs	r2, #5
 8001278:	4619      	mov	r1, r3
 800127a:	2010      	movs	r0, #16
 800127c:	f7ff ff2a 	bl	80010d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001280:	2100      	movs	r1, #0
 8001282:	2011      	movs	r0, #17
 8001284:	f7ff ff04 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001288:	2100      	movs	r1, #0
 800128a:	2012      	movs	r0, #18
 800128c:	f7ff ff00 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001290:	2100      	movs	r1, #0
 8001292:	2013      	movs	r0, #19
 8001294:	f7ff fefc 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2014      	movs	r0, #20
 800129c:	f7ff fef8 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2015      	movs	r0, #21
 80012a4:	f7ff fef4 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2016      	movs	r0, #22
 80012ac:	f7ff fef0 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80012b0:	2111      	movs	r1, #17
 80012b2:	2017      	movs	r0, #23
 80012b4:	f7ff feec 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	201c      	movs	r0, #28
 80012bc:	f7ff fee8 	bl	8001090 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	201d      	movs	r0, #29
 80012c4:	f7ff fee4 	bl	8001090 <nrf24_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08006398 	.word	0x08006398
 80012d4:	080063a0 	.word	0x080063a0

080012d8 <NRF24_Init>:




void NRF24_Init (void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80012dc:	f7ff fecc 	bl	8001078 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff53 	bl	800118c <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80012e6:	2100      	movs	r1, #0
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fed1 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80012ee:	2100      	movs	r1, #0
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fecd 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80012f6:	2100      	movs	r1, #0
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff fec9 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80012fe:	2103      	movs	r1, #3
 8001300:	2003      	movs	r0, #3
 8001302:	f7ff fec5 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001306:	2100      	movs	r1, #0
 8001308:	2004      	movs	r0, #4
 800130a:	f7ff fec1 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800130e:	2100      	movs	r1, #0
 8001310:	2005      	movs	r0, #5
 8001312:	f7ff febd 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001316:	210e      	movs	r1, #14
 8001318:	2006      	movs	r0, #6
 800131a:	f7ff feb9 	bl	8001090 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800131e:	f7ff fe9f 	bl	8001060 <CE_Enable>

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001332:	f7ff fea1 	bl	8001078 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	4619      	mov	r1, r3
 800133a:	2005      	movs	r0, #5
 800133c:	f7ff fea8 	bl	8001090 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8001340:	2205      	movs	r2, #5
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	2010      	movs	r0, #16
 8001346:	f7ff fec5 	bl	80010d4 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fee8 	bl	8001120 <nrf24_ReadReg>
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	4619      	mov	r1, r3
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fe95 	bl	8001090 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001366:	f7ff fe7b 	bl	8001060 <CE_Enable>
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 8001380:	f7ff fe56 	bl	8001030 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001388:	f107 010e 	add.w	r1, r7, #14
 800138c:	2364      	movs	r3, #100	; 0x64
 800138e:	2201      	movs	r2, #1
 8001390:	4816      	ldr	r0, [pc, #88]	; (80013ec <NRF24_Transmit+0x78>)
 8001392:	f002 fa0c 	bl	80037ae <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	2220      	movs	r2, #32
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <NRF24_Transmit+0x78>)
 80013a0:	f002 fa05 	bl	80037ae <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80013a4:	f7ff fe50 	bl	8001048 <CS_UnSelect>

	HAL_Delay(1);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 f887 	bl	80014bc <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80013ae:	2017      	movs	r0, #23
 80013b0:	f7ff feb6 	bl	8001120 <nrf24_ReadReg>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00f      	beq.n	80013e2 <NRF24_Transmit+0x6e>
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10a      	bne.n	80013e2 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 80013cc:	23e1      	movs	r3, #225	; 0xe1
 80013ce:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fec4 	bl	8001160 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 80013d8:	2017      	movs	r0, #23
 80013da:	f7ff fed7 	bl	800118c <nrf24_reset>

		return 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <NRF24_Transmit+0x70>
	}

	return 0;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000008c 	.word	0x2000008c

080013f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f94f 	bl	80016a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fbd8 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f967 	bl	800170e <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f92f 	bl	80016ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000030 	.word	0x20000030
 8001474:	20000038 	.word	0x20000038
 8001478:	20000034 	.word	0x20000034

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x20>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x24>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_IncTick+0x24>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000038 	.word	0x20000038
 80014a0:	2000033c 	.word	0x2000033c

080014a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000033c 	.word	0x2000033c

080014bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d005      	beq.n	80014e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_Delay+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4413      	add	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014e2:	bf00      	nop
 80014e4:	f7ff ffde 	bl	80014a4 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d8f7      	bhi.n	80014e4 <HAL_Delay+0x28>
  {
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000038 	.word	0x20000038

08001504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001520:	4013      	ands	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800152c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x44>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__NVIC_GetPriorityGrouping+0x18>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 0307 	and.w	r3, r3, #7
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db0b      	blt.n	8001592 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <__NVIC_EnableIRQ+0x38>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2001      	movs	r0, #1
 800158a:	fa00 f202 	lsl.w	r2, r0, r2
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db0a      	blt.n	80015ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	490c      	ldr	r1, [pc, #48]	; (80015f0 <__NVIC_SetPriority+0x4c>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	0112      	lsls	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	440b      	add	r3, r1
 80015c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015cc:	e00a      	b.n	80015e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4908      	ldr	r1, [pc, #32]	; (80015f4 <__NVIC_SetPriority+0x50>)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3b04      	subs	r3, #4
 80015dc:	0112      	lsls	r2, r2, #4
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	761a      	strb	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000e100 	.word	0xe000e100
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f1c3 0307 	rsb	r3, r3, #7
 8001612:	2b04      	cmp	r3, #4
 8001614:	bf28      	it	cs
 8001616:	2304      	movcs	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3304      	adds	r3, #4
 800161e:	2b06      	cmp	r3, #6
 8001620:	d902      	bls.n	8001628 <NVIC_EncodePriority+0x30>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3b03      	subs	r3, #3
 8001626:	e000      	b.n	800162a <NVIC_EncodePriority+0x32>
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	f04f 32ff 	mov.w	r2, #4294967295
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43da      	mvns	r2, r3
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	f04f 31ff 	mov.w	r1, #4294967295
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43d9      	mvns	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	4313      	orrs	r3, r2
         );
}
 8001652:	4618      	mov	r0, r3
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001670:	d301      	bcc.n	8001676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001672:	2301      	movs	r3, #1
 8001674:	e00f      	b.n	8001696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <SysTick_Config+0x40>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167e:	210f      	movs	r1, #15
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f7ff ff8e 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <SysTick_Config+0x40>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <SysTick_Config+0x40>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff29 	bl	8001504 <__NVIC_SetPriorityGrouping>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff3e 	bl	800154c <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff8e 	bl	80015f8 <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff31 	bl	8001568 <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa2 	bl	8001660 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e037      	b.n	80017ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001752:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001756:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001760:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800176c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001778:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f8f2 	bl	8001978 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d005      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2204      	movs	r2, #4
 80017ce:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e027      	b.n	8001826 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020e 	bic.w	r2, r2, #14
 80017e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	4798      	blx	r3
    }
  }
  return status;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2204      	movs	r2, #4
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d024      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x72>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	d01f      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b00      	cmp	r3, #0
 800186e:	d107      	bne.n	8001880 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0204 	bic.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2104      	movs	r1, #4
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d06a      	beq.n	800196e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018a0:	e065      	b.n	800196e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2202      	movs	r2, #2
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d02c      	beq.n	800190c <HAL_DMA_IRQHandler+0xdc>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d027      	beq.n	800190c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10b      	bne.n	80018e2 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 020a 	bic.w	r2, r2, #10
 80018d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	2102      	movs	r1, #2
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d035      	beq.n	800196e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800190a:	e030      	b.n	800196e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2208      	movs	r2, #8
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d028      	beq.n	800196e <HAL_DMA_IRQHandler+0x13e>
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d023      	beq.n	800196e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 020e 	bic.w	r2, r2, #14
 8001934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    }
  }
}
 800196c:	e7ff      	b.n	800196e <HAL_DMA_IRQHandler+0x13e>
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <DMA_CalcBaseAndBitshift+0x60>)
 8001988:	429a      	cmp	r2, r3
 800198a:	d80f      	bhi.n	80019ac <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <DMA_CalcBaseAndBitshift+0x64>)
 8001994:	4413      	add	r3, r2
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	009a      	lsls	r2, r3, #2
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <DMA_CalcBaseAndBitshift+0x6c>)
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80019aa:	e00e      	b.n	80019ca <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <DMA_CalcBaseAndBitshift+0x70>)
 80019b4:	4413      	add	r3, r2
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <DMA_CalcBaseAndBitshift+0x68>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	009a      	lsls	r2, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <DMA_CalcBaseAndBitshift+0x74>)
 80019c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40020407 	.word	0x40020407
 80019dc:	bffdfff8 	.word	0xbffdfff8
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	40020000 	.word	0x40020000
 80019e8:	bffdfbf8 	.word	0xbffdfbf8
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fe:	e160      	b.n	8001cc2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8152 	beq.w	8001cbc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d005      	beq.n	8001a30 <HAL_GPIO_Init+0x40>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d130      	bne.n	8001a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a66:	2201      	movs	r2, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 0201 	and.w	r2, r3, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d017      	beq.n	8001ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d123      	bne.n	8001b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691a      	ldr	r2, [r3, #16]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80ac 	beq.w	8001cbc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a5d      	ldr	r2, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b7c:	4a59      	ldr	r2, [pc, #356]	; (8001ce4 <HAL_GPIO_Init+0x2f4>)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ba6:	d025      	beq.n	8001bf4 <HAL_GPIO_Init+0x204>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x2f8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01f      	beq.n	8001bf0 <HAL_GPIO_Init+0x200>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x2fc>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d019      	beq.n	8001bec <HAL_GPIO_Init+0x1fc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x300>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1f8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1f4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x308>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1f0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x30c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1ec>
 8001bd8:	2306      	movs	r3, #6
 8001bda:	e00c      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bdc:	2307      	movs	r3, #7
 8001bde:	e00a      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be0:	2305      	movs	r3, #5
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be4:	2304      	movs	r3, #4
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <HAL_GPIO_Init+0x2f4>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c38:	4a31      	ldr	r2, [pc, #196]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c62:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_GPIO_Init+0x310>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f47f ae97 	bne.w	8001a00 <HAL_GPIO_Init+0x10>
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	bf00      	nop
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	48001000 	.word	0x48001000
 8001cf8:	48001400 	.word	0x48001400
 8001cfc:	48001800 	.word	0x48001800
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d44:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f001 b83a 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 816f 	beq.w	800204e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d70:	4bb5      	ldr	r3, [pc, #724]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4bb2      	ldr	r3, [pc, #712]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d15c      	bne.n	8001e42 <HAL_RCC_OscConfig+0x10e>
 8001d88:	4baf      	ldr	r3, [pc, #700]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d155      	bne.n	8001e42 <HAL_RCC_OscConfig+0x10e>
 8001d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001daa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	095b      	lsrs	r3, r3, #5
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x94>
 8001dc2:	4ba1      	ldr	r3, [pc, #644]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	e015      	b.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001de4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001df0:	4b95      	ldr	r3, [pc, #596]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001df8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001dfc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e00:	fa92 f2a2 	rbit	r2, r2
 8001e04:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e0c:	fab2 f282 	clz	r2, r2
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f042 0220 	orr.w	r2, r2, #32
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8111 	beq.w	800204c <HAL_RCC_OscConfig+0x318>
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 8108 	bne.w	800204c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f000 bfc6 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12e>
 8001e54:	4b7c      	ldr	r3, [pc, #496]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a7b      	ldr	r2, [pc, #492]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e036      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x158>
 8001e72:	4b75      	ldr	r3, [pc, #468]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a74      	ldr	r2, [pc, #464]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a71      	ldr	r2, [pc, #452]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e021      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x184>
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a66      	ldr	r2, [pc, #408]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x19c>
 8001eb8:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a62      	ldr	r2, [pc, #392]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b60      	ldr	r3, [pc, #384]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d059      	beq.n	8001f94 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fae0 	bl	80014a4 <HAL_GetTick>
 8001ee4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7ff fadb 	bl	80014a4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d902      	bls.n	8001f00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	f000 bf67 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 8001f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f04:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1fe>
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0x22a>
 8001f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f36:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f4e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f5a:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f62:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f72:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ab      	beq.n	8001eea <HAL_RCC_OscConfig+0x1b6>
 8001f92:	e05c      	b.n	800204e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa86 	bl	80014a4 <HAL_GetTick>
 8001f98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fa81 	bl	80014a4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	f000 bf0d 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001fc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2b2>
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	e015      	b.n	8002012 <HAL_RCC_OscConfig+0x2de>
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001ffa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002002:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_RCC_OscConfig+0x314>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002016:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800201a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800201e:	fa92 f2a2 	rbit	r2, r2
 8002022:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002026:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800202a:	fab2 f282 	clz	r2, r2
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f002 021f 	and.w	r2, r2, #31
 800203a:	2101      	movs	r1, #1
 800203c:	fa01 f202 	lsl.w	r2, r1, r2
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ab      	bne.n	8001f9e <HAL_RCC_OscConfig+0x26a>
 8002046:	e002      	b.n	800204e <HAL_RCC_OscConfig+0x31a>
 8002048:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 817f 	beq.w	8002362 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002064:	4ba7      	ldr	r3, [pc, #668]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00c      	beq.n	800208a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002070:	4ba4      	ldr	r3, [pc, #656]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d173      	bne.n	8002164 <HAL_RCC_OscConfig+0x430>
 800207c:	4ba1      	ldr	r3, [pc, #644]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002088:	d16c      	bne.n	8002164 <HAL_RCC_OscConfig+0x430>
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800209c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d102      	bne.n	80020ba <HAL_RCC_OscConfig+0x386>
 80020b4:	4b93      	ldr	r3, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	e013      	b.n	80020e2 <HAL_RCC_OscConfig+0x3ae>
 80020ba:	2302      	movs	r3, #2
 80020bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80020cc:	2302      	movs	r3, #2
 80020ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2202      	movs	r2, #2
 80020e4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80020e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80020f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCC_OscConfig+0x3f6>
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d002      	beq.n	800212a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	f000 be52 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	21f8      	movs	r1, #248	; 0xf8
 8002140:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002148:	fa91 f1a1 	rbit	r1, r1
 800214c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002150:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002154:	fab1 f181 	clz	r1, r1
 8002158:	b2c9      	uxtb	r1, r1
 800215a:	408b      	lsls	r3, r1
 800215c:	4969      	ldr	r1, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e0fe      	b.n	8002362 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8088 	beq.w	8002286 <HAL_RCC_OscConfig+0x552>
 8002176:	2301      	movs	r3, #1
 8002178:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002188:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002196:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	461a      	mov	r2, r3
 800219e:	2301      	movs	r3, #1
 80021a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff f97f 	bl	80014a4 <HAL_GetTick>
 80021a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff f97a 	bl	80014a4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d902      	bls.n	80021c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	f000 be06 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80021d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4be>
 80021ec:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e013      	b.n	800221a <HAL_RCC_OscConfig+0x4e6>
 80021f2:	2302      	movs	r3, #2
 80021f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800220a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2202      	movs	r2, #2
 800221c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002220:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002224:	fa92 f2a2 	rbit	r2, r2
 8002228:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800222c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002230:	fab2 f282 	clz	r2, r2
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	f042 0220 	orr.w	r2, r2, #32
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f002 021f 	and.w	r2, r2, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0af      	beq.n	80021ac <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	21f8      	movs	r1, #248	; 0xf8
 8002262:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800226a:	fa91 f1a1 	rbit	r1, r1
 800226e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002272:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002276:	fab1 f181 	clz	r1, r1
 800227a:	b2c9      	uxtb	r1, r1
 800227c:	408b      	lsls	r3, r1
 800227e:	4921      	ldr	r1, [pc, #132]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e06d      	b.n	8002362 <HAL_RCC_OscConfig+0x62e>
 8002286:	2301      	movs	r3, #1
 8002288:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002298:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	2300      	movs	r3, #0
 80022b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff f8f7 	bl	80014a4 <HAL_GetTick>
 80022b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022bc:	f7ff f8f2 	bl	80014a4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f000 bd7e 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80022e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x5d4>
 80022fc:	4b01      	ldr	r3, [pc, #4]	; (8002304 <HAL_RCC_OscConfig+0x5d0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e016      	b.n	8002330 <HAL_RCC_OscConfig+0x5fc>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002320:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800232c:	4bbf      	ldr	r3, [pc, #764]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2202      	movs	r2, #2
 8002332:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002336:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002342:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ac      	bne.n	80022bc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002366:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8113 	beq.w	800259e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d07c      	beq.n	8002482 <HAL_RCC_OscConfig+0x74e>
 8002388:	2301      	movs	r3, #1
 800238a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800239a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	4ba2      	ldr	r3, [pc, #648]	; (8002630 <HAL_RCC_OscConfig+0x8fc>)
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	461a      	mov	r2, r3
 80023ae:	2301      	movs	r3, #1
 80023b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f877 	bl	80014a4 <HAL_GetTick>
 80023b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff f872 	bl	80014a4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d902      	bls.n	80023d2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	f000 bcfe 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002412:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002430:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b7e      	ldr	r3, [pc, #504]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800243e:	2102      	movs	r1, #2
 8002440:	6019      	str	r1, [r3, #0]
 8002442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f1a3 	rbit	r1, r3
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002458:	6019      	str	r1, [r3, #0]
  return result;
 800245a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800245e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d09d      	beq.n	80023bc <HAL_RCC_OscConfig+0x688>
 8002480:	e08d      	b.n	800259e <HAL_RCC_OscConfig+0x86a>
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002492:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x8fc>)
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	461a      	mov	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c4:	f7fe ffee 	bl	80014a4 <HAL_GetTick>
 80024c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ce:	f7fe ffe9 	bl	80014a4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d902      	bls.n	80024e4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	f000 bc75 	b.w	8002dce <HAL_RCC_OscConfig+0x109a>
 80024e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024ec:	2202      	movs	r2, #2
 80024ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002502:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800250c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	fa93 f2a3 	rbit	r2, r3
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002530:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002534:	2202      	movs	r2, #2
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	fa93 f2a3 	rbit	r2, r3
 8002546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800254e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 8002552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002558:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800255c:	2102      	movs	r1, #2
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f1a3 	rbit	r1, r3
 800256e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002572:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002576:	6019      	str	r1, [r3, #0]
  return result;
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d197      	bne.n	80024ce <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 81a5 	beq.w	80028fe <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	61d3      	str	r3, [r2, #28]
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_RCC_OscConfig+0x8f8>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_RCC_OscConfig+0x900>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d121      	bne.n	8002644 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x900>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x900>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7fe ff4a 	bl	80014a4 <HAL_GetTick>
 8002610:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e010      	b.n	8002638 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe ff45 	bl	80014a4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d908      	bls.n	8002638 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e3d1      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	10908120 	.word	0x10908120
 8002634:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <HAL_RCC_OscConfig+0xb3c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0e8      	beq.n	8002616 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002648:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x92e>
 8002654:	4b87      	ldr	r3, [pc, #540]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a86      	ldr	r2, [pc, #536]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e035      	b.n	80026ce <HAL_RCC_OscConfig+0x99a>
 8002662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002666:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x958>
 8002672:	4b80      	ldr	r3, [pc, #512]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a7f      	ldr	r2, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a7c      	ldr	r2, [pc, #496]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002684:	f023 0304 	bic.w	r3, r3, #4
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	e020      	b.n	80026ce <HAL_RCC_OscConfig+0x99a>
 800268c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x982>
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a74      	ldr	r2, [pc, #464]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	4b72      	ldr	r3, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a71      	ldr	r2, [pc, #452]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x99a>
 80026b6:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b6c      	ldr	r3, [pc, #432]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a6b      	ldr	r2, [pc, #428]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8081 	beq.w	80027e2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe fee0 	bl	80014a4 <HAL_GetTick>
 80026e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fedb 	bl	80014a4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e365      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 8002702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002706:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800270a:	2202      	movs	r2, #2
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002712:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002720:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002736:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002744:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002748:	601a      	str	r2, [r3, #0]
  return result;
 800274a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002752:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d102      	bne.n	800276e <HAL_RCC_OscConfig+0xa3a>
 8002768:	4b42      	ldr	r3, [pc, #264]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	e013      	b.n	8002796 <HAL_RCC_OscConfig+0xa62>
 800276e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002772:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800279a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800279e:	2102      	movs	r1, #2
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	fa92 f1a2 	rbit	r1, r2
 80027b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027b4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027b8:	6011      	str	r1, [r2, #0]
  return result;
 80027ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027be:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	f002 021f 	and.w	r2, r2, #31
 80027d4:	2101      	movs	r1, #1
 80027d6:	fa01 f202 	lsl.w	r2, r1, r2
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d084      	beq.n	80026ea <HAL_RCC_OscConfig+0x9b6>
 80027e0:	e083      	b.n	80028ea <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fe5f 	bl	80014a4 <HAL_GetTick>
 80027e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7fe fe5a 	bl	80014a4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e2e4      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 8002804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002808:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800280c:	2202      	movs	r2, #2
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002814:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002822:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002830:	2202      	movs	r2, #2
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002846:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800284a:	601a      	str	r2, [r3, #0]
  return result;
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002854:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0xb44>
 800286a:	4b02      	ldr	r3, [pc, #8]	; (8002874 <HAL_RCC_OscConfig+0xb40>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	e017      	b.n	80028a0 <HAL_RCC_OscConfig+0xb6c>
 8002870:	40007000 	.word	0x40007000
 8002874:	40021000 	.word	0x40021000
 8002878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002888:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002896:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4bb3      	ldr	r3, [pc, #716]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028a8:	2102      	movs	r1, #2
 80028aa:	6011      	str	r1, [r2, #0]
 80028ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	fa92 f1a2 	rbit	r1, r2
 80028ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028be:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80028c2:	6011      	str	r1, [r2, #0]
  return result;
 80028c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028c8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f002 021f 	and.w	r2, r2, #31
 80028de:	2101      	movs	r1, #1
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d180      	bne.n	80027ec <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b9e      	ldr	r3, [pc, #632]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4a9d      	ldr	r2, [pc, #628]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002902:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 825e 	beq.w	8002dcc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002910:	4b96      	ldr	r3, [pc, #600]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b08      	cmp	r3, #8
 800291a:	f000 821f 	beq.w	8002d5c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002922:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 8170 	bne.w	8002c10 <HAL_RCC_OscConfig+0xedc>
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800293c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002942:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	fa93 f2a3 	rbit	r2, r3
 800294c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002950:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002954:	601a      	str	r2, [r3, #0]
  return result;
 8002956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800295e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800296a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	2300      	movs	r3, #0
 8002974:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fd95 	bl	80014a4 <HAL_GetTick>
 800297a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297e:	e009      	b.n	8002994 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fd90 	bl	80014a4 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e21c      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 8002994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002998:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800299c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029b8:	601a      	str	r2, [r3, #0]
  return result;
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80029c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0xcaa>
 80029d8:	4b64      	ldr	r3, [pc, #400]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	e027      	b.n	8002a2e <HAL_RCC_OscConfig+0xcfa>
 80029de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a24:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a32:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a36:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a3a:	6011      	str	r1, [r2, #0]
 8002a3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a40:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	fa92 f1a2 	rbit	r1, r2
 8002a4a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a4e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002a52:	6011      	str	r1, [r2, #0]
  return result;
 8002a54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a58:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f042 0220 	orr.w	r2, r2, #32
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d182      	bne.n	8002980 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	4937      	ldr	r1, [pc, #220]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a19      	ldr	r1, [r3, #32]
 8002aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	492d      	ldr	r1, [pc, #180]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f2a3 	rbit	r2, r3
 8002ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002adc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ae0:	601a      	str	r2, [r3, #0]
  return result;
 8002ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002aea:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002af6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fccf 	bl	80014a4 <HAL_GetTick>
 8002b06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b0a:	e009      	b.n	8002b20 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fcca 	bl	80014a4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e156      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0xe3c>
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <HAL_RCC_OscConfig+0xe38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	e02a      	b.n	8002bc0 <HAL_RCC_OscConfig+0xe8c>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	fa93 f2a3 	rbit	r2, r3
 8002b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	4b86      	ldr	r3, [pc, #536]	; (8002dd8 <HAL_RCC_OscConfig+0x10a4>)
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bc4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bd2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	fa92 f1a2 	rbit	r1, r2
 8002bdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002be0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002be4:	6011      	str	r1, [r2, #0]
  return result;
 8002be6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bea:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f002 021f 	and.w	r2, r2, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f43f af7f 	beq.w	8002b0c <HAL_RCC_OscConfig+0xdd8>
 8002c0e:	e0dd      	b.n	8002dcc <HAL_RCC_OscConfig+0x1098>
 8002c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c14:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fa93 f2a3 	rbit	r2, r3
 8002c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c34:	601a      	str	r2, [r3, #0]
  return result;
 8002c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fc25 	bl	80014a4 <HAL_GetTick>
 8002c5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fe fc20 	bl	80014a4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0ac      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
 8002c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c78:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c98:	601a      	str	r2, [r3, #0]
  return result;
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ca2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_OscConfig+0xf8a>
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCC_OscConfig+0x10a4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	e027      	b.n	8002d0e <HAL_RCC_OscConfig+0xfda>
 8002cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_RCC_OscConfig+0x10a4>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d12:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d16:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d1a:	6011      	str	r1, [r2, #0]
 8002d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	fa92 f1a2 	rbit	r1, r2
 8002d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d2e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d32:	6011      	str	r1, [r2, #0]
  return result;
 8002d34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d38:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	fab2 f282 	clz	r2, r2
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	f042 0220 	orr.w	r2, r2, #32
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f002 021f 	and.w	r2, r2, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f202 	lsl.w	r2, r1, r2
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d182      	bne.n	8002c60 <HAL_RCC_OscConfig+0xf2c>
 8002d5a:	e037      	b.n	8002dcc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e02e      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <HAL_RCC_OscConfig+0x10a4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_RCC_OscConfig+0x10a4>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d84:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d117      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db4:	f003 020f 	and.w	r2, r3, #15
 8002db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b09e      	sub	sp, #120	; 0x78
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e162      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b90      	ldr	r3, [pc, #576]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b8d      	ldr	r3, [pc, #564]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0207 	bic.w	r2, r3, #7
 8002e0a:	498b      	ldr	r1, [pc, #556]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e14a      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	497f      	ldr	r1, [pc, #508]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80dc 	beq.w	8003008 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d13c      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xf6>
 8002e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d102      	bne.n	8002e82 <HAL_RCC_ClockConfig+0xa6>
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e00f      	b.n	8002ea2 <HAL_RCC_ClockConfig+0xc6>
 8002e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e94:	663b      	str	r3, [r7, #96]	; 0x60
 8002e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ea6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eaa:	fa92 f2a2 	rbit	r2, r2
 8002eae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002eb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eb2:	fab2 f282 	clz	r2, r2
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	f042 0220 	orr.w	r2, r2, #32
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 021f 	and.w	r2, r2, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d17b      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0f3      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d13c      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x178>
 8002eda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x128>
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e00f      	b.n	8002f24 <HAL_RCC_ClockConfig+0x148>
 8002f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	647b      	str	r3, [r7, #68]	; 0x44
 8002f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f20:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f28:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f2c:	fa92 f2a2 	rbit	r2, r2
 8002f30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f34:	fab2 f282 	clz	r2, r2
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f042 0220 	orr.w	r2, r2, #32
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f002 021f 	and.w	r2, r2, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d13a      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b2      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
 8002f54:	2302      	movs	r3, #2
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x1a0>
 8002f76:	4b31      	ldr	r3, [pc, #196]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e00d      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1bc>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
 8002f88:	2302      	movs	r3, #2
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	fa93 f3a3 	rbit	r3, r3
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2202      	movs	r2, #2
 8002f9a:	61ba      	str	r2, [r7, #24]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	fa92 f2a2 	rbit	r2, r2
 8002fa2:	617a      	str	r2, [r7, #20]
  return result;
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	fab2 f282 	clz	r2, r2
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f002 021f 	and.w	r2, r2, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e079      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	491a      	ldr	r1, [pc, #104]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd8:	f7fe fa64 	bl	80014a4 <HAL_GetTick>
 8002fdc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe0:	f7fe fa60 	bl	80014a4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e061      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_ClockConfig+0x260>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 020c 	and.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	429a      	cmp	r2, r3
 8003006:	d1eb      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d214      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 0207 	bic.w	r2, r3, #7
 800301e:	4906      	ldr	r1, [pc, #24]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_RCC_ClockConfig+0x25c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e040      	b.n	80030ba <HAL_RCC_ClockConfig+0x2de>
 8003038:	40022000 	.word	0x40022000
 800303c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCC_ClockConfig+0x2e8>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	491a      	ldr	r1, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x2e8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <HAL_RCC_ClockConfig+0x2e8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4912      	ldr	r1, [pc, #72]	; (80030c4 <HAL_RCC_ClockConfig+0x2e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800307e:	f000 f829 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8003082:	4601      	mov	r1, r0
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800308c:	22f0      	movs	r2, #240	; 0xf0
 800308e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	fa92 f2a2 	rbit	r2, r2
 8003096:	60fa      	str	r2, [r7, #12]
  return result;
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	fab2 f282 	clz	r2, r2
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	40d3      	lsrs	r3, r2
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x2ec>)
 80030a4:	5cd3      	ldrb	r3, [r2, r3]
 80030a6:	fa21 f303 	lsr.w	r3, r1, r3
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_RCC_ClockConfig+0x2f0>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_RCC_ClockConfig+0x2f4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f9b2 	bl	800141c <HAL_InitTick>
  
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3778      	adds	r7, #120	; 0x78
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	080063a8 	.word	0x080063a8
 80030cc:	20000030 	.word	0x20000030
 80030d0:	20000034 	.word	0x20000034

080030d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030ee:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCC_GetSysClockFreq+0x98>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d002      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x30>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d003      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x36>
 8003102:	e029      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003104:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003106:	613b      	str	r3, [r7, #16]
      break;
 8003108:	e029      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0c9b      	lsrs	r3, r3, #18
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003130:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e007      	b.n	8003152 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	fbb2 f2f3 	udiv	r2, r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	613b      	str	r3, [r7, #16]
      break;
 8003156:	e002      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetSysClockFreq+0x9c>)
 800315a:	613b      	str	r3, [r7, #16]
      break;
 800315c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315e:	693b      	ldr	r3, [r7, #16]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40021000 	.word	0x40021000
 8003170:	007a1200 	.word	0x007a1200
 8003174:	080063c0 	.word	0x080063c0
 8003178:	080063d0 	.word	0x080063d0

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000030 	.word	0x20000030

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800319a:	f7ff ffef 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319e:	4601      	mov	r1, r0
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	603a      	str	r2, [r7, #0]
  return result;
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	fab2 f282 	clz	r2, r2
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	40d3      	lsrs	r3, r2
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	080063b8 	.word	0x080063b8

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031de:	f7ff ffcd 	bl	800317c <HAL_RCC_GetHCLKFreq>
 80031e2:	4601      	mov	r1, r0
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80031f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	fa92 f2a2 	rbit	r2, r2
 80031f8:	603a      	str	r2, [r7, #0]
  return result;
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	fab2 f282 	clz	r2, r2
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	40d3      	lsrs	r3, r2
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003206:	5cd3      	ldrb	r3, [r2, r3]
 8003208:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	080063b8 	.word	0x080063b8

0800321c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b092      	sub	sp, #72	; 0x48
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80d4 	beq.w	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003240:	4b4e      	ldr	r3, [pc, #312]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10e      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	4a4a      	ldr	r2, [pc, #296]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003256:	61d3      	str	r3, [r2, #28]
 8003258:	4b48      	ldr	r3, [pc, #288]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b45      	ldr	r3, [pc, #276]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b42      	ldr	r3, [pc, #264]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a41      	ldr	r2, [pc, #260]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe f90f 	bl	80014a4 <HAL_GetTick>
 8003286:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe f90b 	bl	80014a4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1d6      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b38      	ldr	r3, [pc, #224]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8084 	beq.w	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d07c      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c8:	4b2c      	ldr	r3, [pc, #176]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	461a      	mov	r2, r3
 80032f2:	2301      	movs	r3, #1
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	461a      	mov	r2, r3
 8003316:	2300      	movs	r3, #0
 8003318:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04b      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe f8bb 	bl	80014a4 <HAL_GetTick>
 800332e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe f8b7 	bl	80014a4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e180      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003348:	2302      	movs	r3, #2
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
 8003354:	2302      	movs	r3, #2
 8003356:	623b      	str	r3, [r7, #32]
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	61fb      	str	r3, [r7, #28]
  return result;
 8003360:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d108      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003376:	4b01      	ldr	r3, [pc, #4]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	e00d      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
 8003384:	10908100 	.word	0x10908100
 8003388:	2302      	movs	r3, #2
 800338a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	4b9a      	ldr	r3, [pc, #616]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2202      	movs	r2, #2
 800339a:	613a      	str	r2, [r7, #16]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	fa92 f2a2 	rbit	r2, r2
 80033a2:	60fa      	str	r2, [r7, #12]
  return result;
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	fab2 f282 	clz	r2, r2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f002 021f 	and.w	r2, r2, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f202 	lsl.w	r2, r1, r2
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0b7      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033c2:	4b8f      	ldr	r3, [pc, #572]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	498c      	ldr	r1, [pc, #560]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b88      	ldr	r3, [pc, #544]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a87      	ldr	r2, [pc, #540]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f4:	4b82      	ldr	r3, [pc, #520]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f023 0203 	bic.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	497f      	ldr	r1, [pc, #508]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003412:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4978      	ldr	r1, [pc, #480]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003430:	4b73      	ldr	r3, [pc, #460]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	4970      	ldr	r1, [pc, #448]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800344e:	4b6c      	ldr	r3, [pc, #432]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f023 0210 	bic.w	r2, r3, #16
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	4969      	ldr	r1, [pc, #420]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	4961      	ldr	r1, [pc, #388]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800348a:	4b5d      	ldr	r3, [pc, #372]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f023 0220 	bic.w	r2, r3, #32
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	495a      	ldr	r1, [pc, #360]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a8:	4b55      	ldr	r3, [pc, #340]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	4952      	ldr	r1, [pc, #328]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c6:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	494b      	ldr	r1, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e4:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4943      	ldr	r1, [pc, #268]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	493c      	ldr	r1, [pc, #240]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	492d      	ldr	r1, [pc, #180]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800355c:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	4925      	ldr	r1, [pc, #148]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	491e      	ldr	r1, [pc, #120]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	490f      	ldr	r1, [pc, #60]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035f2:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	e002      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	4913      	ldr	r1, [pc, #76]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003608:	4313      	orrs	r3, r2
 800360a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	490b      	ldr	r1, [pc, #44]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003626:	4313      	orrs	r3, r2
 8003628:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003644:	4313      	orrs	r3, r2
 8003646:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3748      	adds	r7, #72	; 0x48
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000

08003658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e09d      	b.n	80037a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d009      	beq.n	8003690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	61da      	str	r2, [r3, #28]
 8003682:	e005      	b.n	8003690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d106      	bne.n	80036b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd f954 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036d0:	d902      	bls.n	80036d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e002      	b.n	80036de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036e6:	d007      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373a:	ea42 0103 	orr.w	r1, r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	0c1b      	lsrs	r3, r3, #16
 8003754:	f003 0204 	and.w	r2, r3, #4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003774:	ea42 0103 	orr.w	r1, r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_SPI_Transmit+0x22>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e15f      	b.n	8003a90 <HAL_SPI_Transmit+0x2e2>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d8:	f7fd fe64 	bl	80014a4 <HAL_GetTick>
 80037dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f2:	e148      	b.n	8003a86 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_SPI_Transmit+0x52>
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003804:	e13f      	b.n	8003a86 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003850:	d10f      	bne.n	8003872 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003870:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d007      	beq.n	8003890 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003898:	d94f      	bls.n	800393a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_SPI_Transmit+0xfa>
 80038a2:	8afb      	ldrh	r3, [r7, #22]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d142      	bne.n	800392e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038cc:	e02f      	b.n	800392e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d112      	bne.n	8003902 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	881a      	ldrh	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003900:	e015      	b.n	800392e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003902:	f7fd fdcf 	bl	80014a4 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d803      	bhi.n	800391a <HAL_SPI_Transmit+0x16c>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d102      	bne.n	8003920 <HAL_SPI_Transmit+0x172>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800392c:	e0ab      	b.n	8003a86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ca      	bne.n	80038ce <HAL_SPI_Transmit+0x120>
 8003938:	e080      	b.n	8003a3c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_SPI_Transmit+0x19a>
 8003942:	8afb      	ldrh	r3, [r7, #22]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d174      	bne.n	8003a32 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d912      	bls.n	8003978 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	881a      	ldrh	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	1c9a      	adds	r2, r3, #2
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b02      	subs	r3, #2
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003976:	e05c      	b.n	8003a32 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	330c      	adds	r3, #12
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800399e:	e048      	b.n	8003a32 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d12b      	bne.n	8003a06 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d912      	bls.n	80039de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b02      	subs	r3, #2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039dc:	e029      	b.n	8003a32 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	330c      	adds	r3, #12
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a04:	e015      	b.n	8003a32 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	f7fd fd4d 	bl	80014a4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d803      	bhi.n	8003a1e <HAL_SPI_Transmit+0x270>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_Transmit+0x276>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d106      	bne.n	8003a32 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003a30:	e029      	b.n	8003a86 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1b1      	bne.n	80039a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fe0d 	bl	8004660 <SPI_EndRxTxTransaction>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e003      	b.n	8003a86 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d002      	beq.n	8003abe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003abc:	e11a      	b.n	8003cf4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac6:	d112      	bne.n	8003aee <HAL_SPI_Receive+0x56>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10e      	bne.n	8003aee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f90e 	bl	8003d06 <HAL_SPI_TransmitReceive>
 8003aea:	4603      	mov	r3, r0
 8003aec:	e107      	b.n	8003cfe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_SPI_Receive+0x64>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e100      	b.n	8003cfe <HAL_SPI_Receive+0x266>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b04:	f7fd fcce 	bl	80014a4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Receive+0x7e>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d102      	bne.n	8003b1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b1a:	e0eb      	b.n	8003cf4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b66:	d908      	bls.n	8003b7a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	e007      	b.n	8003b8a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b88:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d10f      	bne.n	8003bb4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bb2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b40      	cmp	r3, #64	; 0x40
 8003bc0:	d007      	beq.n	8003bd2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bda:	d86f      	bhi.n	8003cbc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003bdc:	e034      	b.n	8003c48 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d117      	bne.n	8003c1c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f103 020c 	add.w	r2, r3, #12
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c1a:	e015      	b.n	8003c48 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1c:	f7fd fc42 	bl	80014a4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d803      	bhi.n	8003c34 <HAL_SPI_Receive+0x19c>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d102      	bne.n	8003c3a <HAL_SPI_Receive+0x1a2>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003c46:	e055      	b.n	8003cf4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1c4      	bne.n	8003bde <HAL_SPI_Receive+0x146>
 8003c54:	e038      	b.n	8003cc8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d115      	bne.n	8003c90 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c8e:	e015      	b.n	8003cbc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c90:	f7fd fc08 	bl	80014a4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d803      	bhi.n	8003ca8 <HAL_SPI_Receive+0x210>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d102      	bne.n	8003cae <HAL_SPI_Receive+0x216>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003cba:	e01b      	b.n	8003cf4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1c6      	bne.n	8003c56 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fc6f 	bl	80045b0 <SPI_EndRxTransaction>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
 8003cea:	e003      	b.n	8003cf4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b08a      	sub	sp, #40	; 0x28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d14:	2301      	movs	r3, #1
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_SPI_TransmitReceive+0x26>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e20a      	b.n	8004142 <HAL_SPI_TransmitReceive+0x43c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d34:	f7fd fbb6 	bl	80014a4 <HAL_GetTick>
 8003d38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d50:	7efb      	ldrb	r3, [r7, #27]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d00e      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x6e>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5c:	d106      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d102      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x66>
 8003d66:	7efb      	ldrb	r3, [r7, #27]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d003      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d72:	e1e0      	b.n	8004136 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x80>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x80>
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003d8c:	e1d3      	b.n	8004136 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d003      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	887a      	ldrh	r2, [r7, #2]
 8003dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	887a      	ldrh	r2, [r7, #2]
 8003dce:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de4:	d802      	bhi.n	8003dec <HAL_SPI_TransmitReceive+0xe6>
 8003de6:	8a3b      	ldrh	r3, [r7, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d908      	bls.n	8003dfe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e007      	b.n	8003e0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d007      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e34:	f240 8081 	bls.w	8003f3a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x140>
 8003e40:	8a7b      	ldrh	r3, [r7, #18]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d16d      	bne.n	8003f22 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6a:	e05a      	b.n	8003f22 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d11b      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x1ac>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <HAL_SPI_TransmitReceive+0x1ac>
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d113      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11c      	bne.n	8003efa <HAL_SPI_TransmitReceive+0x1f4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	1c9a      	adds	r2, r3, #2
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003efa:	f7fd fad3 	bl	80014a4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d80b      	bhi.n	8003f22 <HAL_SPI_TransmitReceive+0x21c>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d007      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003f20:	e109      	b.n	8004136 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d19f      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x166>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d199      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x166>
 8003f38:	e0e3      	b.n	8004102 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x244>
 8003f42:	8a7b      	ldrh	r3, [r7, #18]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 80cf 	bne.w	80040e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d912      	bls.n	8003f7a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	881a      	ldrh	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b02      	subs	r3, #2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f78:	e0b6      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	330c      	adds	r3, #12
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fa0:	e0a2      	b.n	80040e8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d134      	bne.n	800401a <HAL_SPI_TransmitReceive+0x314>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02f      	beq.n	800401a <HAL_SPI_TransmitReceive+0x314>
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d12c      	bne.n	800401a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d912      	bls.n	8003ff0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	1c9a      	adds	r2, r3, #2
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b02      	subs	r3, #2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fee:	e012      	b.n	8004016 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d148      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x3b4>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	d042      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d923      	bls.n	8004088 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	b292      	uxth	r2, r2
 800404c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b02      	subs	r3, #2
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d81f      	bhi.n	80040b6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e016      	b.n	80040b6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f103 020c 	add.w	r2, r3, #12
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040b6:	2301      	movs	r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040ba:	f7fd f9f3 	bl	80014a4 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d803      	bhi.n	80040d2 <HAL_SPI_TransmitReceive+0x3cc>
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d102      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x3d2>
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80040e6:	e026      	b.n	8004136 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f47f af57 	bne.w	8003fa2 <HAL_SPI_TransmitReceive+0x29c>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f af50 	bne.w	8003fa2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 faaa 	bl	8004660 <SPI_EndRxTxTransaction>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412c:	e003      	b.n	8004136 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800413e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004142:	4618      	mov	r0, r3
 8004144:	3728      	adds	r7, #40	; 0x28
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10e      	bne.n	800418c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	4798      	blx	r3
    return;
 800418a:	e0ce      	b.n	800432a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_SPI_IRQHandler+0x5e>
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
    return;
 80041a8:	e0bf      	b.n	800432a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <HAL_SPI_IRQHandler+0x7e>
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80b0 	beq.w	800432a <HAL_SPI_IRQHandler+0x1de>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80aa 	beq.w	800432a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d011      	beq.n	8004210 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	f043 0204 	orr.w	r2, r3, #4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	e00b      	b.n	8004228 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
        return;
 8004226:	e080      	b.n	800432a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d014      	beq.n	800425c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426a:	f043 0208 	orr.w	r2, r3, #8
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	2b00      	cmp	r3, #0
 8004286:	d04f      	beq.n	8004328 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004296:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_SPI_IRQHandler+0x168>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d034      	beq.n	800431e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0203 	bic.w	r2, r2, #3
 80042c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d011      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_SPI_IRQHandler+0x1e4>)
 80042d2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fd fa6b 	bl	80017b4 <HAL_DMA_Abort_IT>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d016      	beq.n	8004326 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	4a0c      	ldr	r2, [pc, #48]	; (8004330 <HAL_SPI_IRQHandler+0x1e4>)
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd fa55 	bl	80017b4 <HAL_DMA_Abort_IT>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800431c:	e003      	b.n	8004326 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f808 	bl	8004334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004324:	e000      	b.n	8004328 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004326:	bf00      	nop
    return;
 8004328:	bf00      	nop
  }
}
 800432a:	3720      	adds	r7, #32
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	08004349 	.word	0x08004349

08004334 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ffe5 	bl	8004334 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004384:	f7fd f88e 	bl	80014a4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004394:	f7fd f886 	bl	80014a4 <HAL_GetTick>
 8004398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800439a:	4b39      	ldr	r3, [pc, #228]	; (8004480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	015b      	lsls	r3, r3, #5
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043aa:	e054      	b.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d050      	beq.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043b4:	f7fd f876 	bl	80014a4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d902      	bls.n	80043ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13d      	bne.n	8004446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e2:	d111      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	d004      	beq.n	80043f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f6:	d107      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004410:	d10f      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e017      	b.n	8004476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	3b01      	subs	r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	429a      	cmp	r2, r3
 8004472:	d19b      	bne.n	80043ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000030 	.word	0x20000030

08004484 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004496:	f7fd f805 	bl	80014a4 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80044a6:	f7fc fffd 	bl	80014a4 <HAL_GetTick>
 80044aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044b4:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00da      	lsls	r2, r3, #3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	0d1b      	lsrs	r3, r3, #20
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044cc:	e060      	b.n	8004590 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044d4:	d107      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d050      	beq.n	8004590 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044ee:	f7fc ffd9 	bl	80014a4 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13d      	bne.n	8004580 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004512:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451c:	d111      	bne.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004526:	d004      	beq.n	8004532 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	d107      	bne.n	8004542 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800454a:	d10f      	bne.n	800456c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e010      	b.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	3b01      	subs	r3, #1
 800458e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d196      	bne.n	80044ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3728      	adds	r7, #40	; 0x28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000030 	.word	0x20000030

080045b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c4:	d111      	bne.n	80045ea <SPI_EndRxTransaction+0x3a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ce:	d004      	beq.n	80045da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d107      	bne.n	80045ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	; 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff febd 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e023      	b.n	8004658 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004618:	d11d      	bne.n	8004656 <SPI_EndRxTransaction+0xa6>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d004      	beq.n	800462e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462c:	d113      	bne.n	8004656 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2200      	movs	r2, #0
 8004636:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff ff22 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e000      	b.n	8004658 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff03 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	f043 0220 	orr.w	r2, r3, #32
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e027      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fe68 	bl	8004374 <SPI_WaitFlagStateUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e014      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fedc 	bl	8004484 <SPI_WaitFifoStateUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d6:	f043 0220 	orr.w	r2, r3, #32
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e000      	b.n	80046e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e049      	b.n	8004792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fb98 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f000 fdf2 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e049      	b.n	8004840 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f841 	bl	8004848 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 fd9b 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <HAL_TIM_IC_Start+0x1a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e023      	b.n	80048be <HAL_TIM_IC_Start+0x62>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d104      	bne.n	8004886 <HAL_TIM_IC_Start+0x2a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e01b      	b.n	80048be <HAL_TIM_IC_Start+0x62>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d104      	bne.n	8004896 <HAL_TIM_IC_Start+0x3a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e013      	b.n	80048be <HAL_TIM_IC_Start+0x62>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b0c      	cmp	r3, #12
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_IC_Start+0x4a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e00b      	b.n	80048be <HAL_TIM_IC_Start+0x62>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_IC_Start+0x5a>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	e003      	b.n	80048be <HAL_TIM_IC_Start+0x62>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <HAL_TIM_IC_Start+0x74>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e013      	b.n	80048f8 <HAL_TIM_IC_Start+0x9c>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d104      	bne.n	80048e0 <HAL_TIM_IC_Start+0x84>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	e00b      	b.n	80048f8 <HAL_TIM_IC_Start+0x9c>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d104      	bne.n	80048f0 <HAL_TIM_IC_Start+0x94>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e003      	b.n	80048f8 <HAL_TIM_IC_Start+0x9c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d102      	bne.n	8004906 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d001      	beq.n	800490a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e092      	b.n	8004a30 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_IC_Start+0xbe>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	e023      	b.n	8004962 <HAL_TIM_IC_Start+0x106>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_IC_Start+0xce>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004928:	e01b      	b.n	8004962 <HAL_TIM_IC_Start+0x106>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_IC_Start+0xde>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004938:	e013      	b.n	8004962 <HAL_TIM_IC_Start+0x106>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d104      	bne.n	800494a <HAL_TIM_IC_Start+0xee>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004948:	e00b      	b.n	8004962 <HAL_TIM_IC_Start+0x106>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b10      	cmp	r3, #16
 800494e:	d104      	bne.n	800495a <HAL_TIM_IC_Start+0xfe>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004958:	e003      	b.n	8004962 <HAL_TIM_IC_Start+0x106>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d104      	bne.n	8004972 <HAL_TIM_IC_Start+0x116>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	e013      	b.n	800499a <HAL_TIM_IC_Start+0x13e>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d104      	bne.n	8004982 <HAL_TIM_IC_Start+0x126>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	e00b      	b.n	800499a <HAL_TIM_IC_Start+0x13e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d104      	bne.n	8004992 <HAL_TIM_IC_Start+0x136>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004990:	e003      	b.n	800499a <HAL_TIM_IC_Start+0x13e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2201      	movs	r2, #1
 80049a0:	6839      	ldr	r1, [r7, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 ffb2 	bl	800590c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_TIM_IC_Start+0x1dc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d018      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_TIM_IC_Start+0x1e0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <HAL_TIM_IC_Start+0x1e4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_TIM_IC_Start+0x1e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_TIM_IC_Start+0x1ec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_IC_Start+0x192>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_TIM_IC_Start+0x1f0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d115      	bne.n	8004a1a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <HAL_TIM_IC_Start+0x1f4>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d015      	beq.n	8004a2c <HAL_TIM_IC_Start+0x1d0>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d011      	beq.n	8004a2c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	e008      	b.n	8004a2c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40015000 	.word	0x40015000
 8004a50:	00010007 	.word	0x00010007

08004a54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0x1e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e023      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x66>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Start_IT+0x2e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e01b      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x66>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Start_IT+0x3e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	e013      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x66>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_IC_Start_IT+0x4e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	e00b      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x66>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_IC_Start_IT+0x5e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e003      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x66>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <HAL_TIM_IC_Start_IT+0x78>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e013      	b.n	8004af4 <HAL_TIM_IC_Start_IT+0xa0>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d104      	bne.n	8004adc <HAL_TIM_IC_Start_IT+0x88>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	e00b      	b.n	8004af4 <HAL_TIM_IC_Start_IT+0xa0>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d104      	bne.n	8004aec <HAL_TIM_IC_Start_IT+0x98>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e003      	b.n	8004af4 <HAL_TIM_IC_Start_IT+0xa0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d102      	bne.n	8004b02 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004afc:	7b7b      	ldrb	r3, [r7, #13]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0dd      	b.n	8004cc2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_IC_Start_IT+0xc2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b14:	e023      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x10a>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_IC_Start_IT+0xd2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	e01b      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x10a>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0xe2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b34:	e013      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x10a>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0xf2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b44:	e00b      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x10a>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0x102>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	e003      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x10a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <HAL_TIM_IC_Start_IT+0x11a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6c:	e013      	b.n	8004b96 <HAL_TIM_IC_Start_IT+0x142>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d104      	bne.n	8004b7e <HAL_TIM_IC_Start_IT+0x12a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7c:	e00b      	b.n	8004b96 <HAL_TIM_IC_Start_IT+0x142>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_IC_Start_IT+0x13a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b8c:	e003      	b.n	8004b96 <HAL_TIM_IC_Start_IT+0x142>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d841      	bhi.n	8004c20 <HAL_TIM_IC_Start_IT+0x1cc>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <HAL_TIM_IC_Start_IT+0x150>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004c21 	.word	0x08004c21
 8004bac:	08004c21 	.word	0x08004c21
 8004bb0:	08004c21 	.word	0x08004c21
 8004bb4:	08004beb 	.word	0x08004beb
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004c21 	.word	0x08004c21
 8004bc0:	08004c21 	.word	0x08004c21
 8004bc4:	08004bfd 	.word	0x08004bfd
 8004bc8:	08004c21 	.word	0x08004c21
 8004bcc:	08004c21 	.word	0x08004c21
 8004bd0:	08004c21 	.word	0x08004c21
 8004bd4:	08004c0f 	.word	0x08004c0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0202 	orr.w	r2, r2, #2
 8004be6:	60da      	str	r2, [r3, #12]
      break;
 8004be8:	e01d      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0204 	orr.w	r2, r2, #4
 8004bf8:	60da      	str	r2, [r3, #12]
      break;
 8004bfa:	e014      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	60da      	str	r2, [r3, #12]
      break;
 8004c0c:	e00b      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0210 	orr.w	r2, r2, #16
 8004c1c:	60da      	str	r2, [r3, #12]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d149      	bne.n	8004cc0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2201      	movs	r2, #1
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fe69 	bl	800590c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <HAL_TIM_IC_Start_IT+0x278>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01d      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d018      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_TIM_IC_Start_IT+0x27c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_TIM_IC_Start_IT+0x280>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00e      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_TIM_IC_Start_IT+0x284>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <HAL_TIM_IC_Start_IT+0x288>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <HAL_TIM_IC_Start_IT+0x22c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d115      	bne.n	8004cac <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_TIM_IC_Start_IT+0x290>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b06      	cmp	r3, #6
 8004c90:	d015      	beq.n	8004cbe <HAL_TIM_IC_Start_IT+0x26a>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d011      	beq.n	8004cbe <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	e008      	b.n	8004cbe <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e000      	b.n	8004cc0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40000400 	.word	0x40000400
 8004cd4:	40000800 	.word	0x40000800
 8004cd8:	40013400 	.word	0x40013400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40015000 	.word	0x40015000
 8004ce4:	00010007 	.word	0x00010007

08004ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d020      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0202 	mvn.w	r2, #2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fb fb3a 	bl	80003ac <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 facc 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fad3 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d020      	beq.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01b      	beq.n	8004d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0204 	mvn.w	r2, #4
 8004d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fb fb14 	bl	80003ac <HAL_TIM_IC_CaptureCallback>
 8004d84:	e005      	b.n	8004d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 faa6 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 faad 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01b      	beq.n	8004de4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0208 	mvn.w	r2, #8
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2204      	movs	r2, #4
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fb faee 	bl	80003ac <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa80 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fa87 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d020      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0210 	mvn.w	r2, #16
 8004e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2208      	movs	r2, #8
 8004e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fb fac8 	bl	80003ac <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa5a 	bl	80052d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fa61 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0301 	and.w	r3, r3, #1
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0201 	mvn.w	r2, #1
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa38 	bl	80052c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fe06 	bl	8005a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fdfe 	bl	8005a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fa20 	bl	8005300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00c      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0220 	mvn.w	r2, #32
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fdc6 	bl	8005a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e088      	b.n	800501c <HAL_TIM_IC_ConfigChannel+0x130>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004f28:	f000 fb32 	bl	8005590 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020c 	bic.w	r2, r2, #12
 8004f3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]
 8004f4e:	e060      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d11c      	bne.n	8004f90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004f66:	f000 fbb0 	bl	80056ca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6999      	ldr	r1, [r3, #24]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]
 8004f8e:	e040      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11b      	bne.n	8004fce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004fa6:	f000 fbfd 	bl	80057a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 020c 	bic.w	r2, r2, #12
 8004fb8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69d9      	ldr	r1, [r3, #28]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	e021      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d11c      	bne.n	800500e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004fe4:	f000 fc1a 	bl	800581c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ff6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69d9      	ldr	r1, [r3, #28]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	021a      	lsls	r2, r3, #8
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	61da      	str	r2, [r3, #28]
 800500c:	e001      	b.n	8005012 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_TIM_ConfigClockSource+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e0b6      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x18a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d03e      	beq.n	80050fc <HAL_TIM_ConfigClockSource+0xd8>
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	f200 8087 	bhi.w	8005194 <HAL_TIM_ConfigClockSource+0x170>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	f000 8086 	beq.w	800519a <HAL_TIM_ConfigClockSource+0x176>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d87f      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b70      	cmp	r3, #112	; 0x70
 8005096:	d01a      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xaa>
 8005098:	2b70      	cmp	r3, #112	; 0x70
 800509a:	d87b      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b60      	cmp	r3, #96	; 0x60
 800509e:	d050      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x11e>
 80050a0:	2b60      	cmp	r3, #96	; 0x60
 80050a2:	d877      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050a4:	2b50      	cmp	r3, #80	; 0x50
 80050a6:	d03c      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0xfe>
 80050a8:	2b50      	cmp	r3, #80	; 0x50
 80050aa:	d873      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d058      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x13e>
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d86f      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050b4:	2b30      	cmp	r3, #48	; 0x30
 80050b6:	d064      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050b8:	2b30      	cmp	r3, #48	; 0x30
 80050ba:	d86b      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d060      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d867      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05c      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d05a      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050cc:	e062      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050de:	f000 fbf5 	bl	80058cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
      break;
 80050fa:	e04f      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800510c:	f000 fbde 	bl	80058cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800511e:	609a      	str	r2, [r3, #8]
      break;
 8005120:	e03c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fa9c 	bl	800566c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2150      	movs	r1, #80	; 0x50
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fbab 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005140:	e02c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800514e:	461a      	mov	r2, r3
 8005150:	f000 faf8 	bl	8005744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2160      	movs	r1, #96	; 0x60
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb9b 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005160:	e01c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800516e:	461a      	mov	r2, r3
 8005170:	f000 fa7c 	bl	800566c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2140      	movs	r1, #64	; 0x40
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fb8b 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005180:	e00c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f000 fb82 	bl	8005896 <TIM_ITRx_SetConfig>
      break;
 8005192:	e003      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e000      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800519a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_SlaveConfigSynchro+0x18>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e031      	b.n	8005232 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f941 	bl	8005468 <TIM_SlaveTimer_SetConfig>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e018      	b.n	8005232 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800521e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b0c      	cmp	r3, #12
 800524e:	d831      	bhi.n	80052b4 <HAL_TIM_ReadCapturedValue+0x78>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	0800528d 	.word	0x0800528d
 800525c:	080052b5 	.word	0x080052b5
 8005260:	080052b5 	.word	0x080052b5
 8005264:	080052b5 	.word	0x080052b5
 8005268:	08005297 	.word	0x08005297
 800526c:	080052b5 	.word	0x080052b5
 8005270:	080052b5 	.word	0x080052b5
 8005274:	080052b5 	.word	0x080052b5
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052b5 	.word	0x080052b5
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052b5 	.word	0x080052b5
 8005288:	080052ab 	.word	0x080052ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	60fb      	str	r3, [r7, #12]

      break;
 8005294:	e00f      	b.n	80052b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	60fb      	str	r3, [r7, #12]

      break;
 800529e:	e00a      	b.n	80052b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	60fb      	str	r3, [r7, #12]

      break;
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	60fb      	str	r3, [r7, #12]

      break;
 80052b2:	e000      	b.n	80052b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80052b4:	bf00      	nop
  }

  return tmpreg;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a48      	ldr	r2, [pc, #288]	; (8005448 <TIM_Base_SetConfig+0x134>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a45      	ldr	r2, [pc, #276]	; (800544c <TIM_Base_SetConfig+0x138>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a44      	ldr	r2, [pc, #272]	; (8005450 <TIM_Base_SetConfig+0x13c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a43      	ldr	r2, [pc, #268]	; (8005454 <TIM_Base_SetConfig+0x140>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a42      	ldr	r2, [pc, #264]	; (8005458 <TIM_Base_SetConfig+0x144>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a37      	ldr	r2, [pc, #220]	; (8005448 <TIM_Base_SetConfig+0x134>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01f      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d01b      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a34      	ldr	r2, [pc, #208]	; (800544c <TIM_Base_SetConfig+0x138>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d017      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a33      	ldr	r2, [pc, #204]	; (8005450 <TIM_Base_SetConfig+0x13c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a32      	ldr	r2, [pc, #200]	; (8005454 <TIM_Base_SetConfig+0x140>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00f      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a32      	ldr	r2, [pc, #200]	; (800545c <TIM_Base_SetConfig+0x148>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00b      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a31      	ldr	r2, [pc, #196]	; (8005460 <TIM_Base_SetConfig+0x14c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a30      	ldr	r2, [pc, #192]	; (8005464 <TIM_Base_SetConfig+0x150>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_Base_SetConfig+0x9a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <TIM_Base_SetConfig+0x144>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a18      	ldr	r2, [pc, #96]	; (8005448 <TIM_Base_SetConfig+0x134>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a19      	ldr	r2, [pc, #100]	; (8005454 <TIM_Base_SetConfig+0x140>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00f      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a19      	ldr	r2, [pc, #100]	; (800545c <TIM_Base_SetConfig+0x148>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a18      	ldr	r2, [pc, #96]	; (8005460 <TIM_Base_SetConfig+0x14c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a17      	ldr	r2, [pc, #92]	; (8005464 <TIM_Base_SetConfig+0x150>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x100>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <TIM_Base_SetConfig+0x144>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d103      	bne.n	800541c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f023 0201 	bic.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]
  }
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40012c00 	.word	0x40012c00
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40013400 	.word	0x40013400
 8005458:	40015000 	.word	0x40015000
 800545c:	40014000 	.word	0x40014000
 8005460:	40014400 	.word	0x40014400
 8005464:	40014800 	.word	0x40014800

08005468 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	f023 0307 	bic.w	r3, r3, #7
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b70      	cmp	r3, #112	; 0x70
 80054b4:	d01a      	beq.n	80054ec <TIM_SlaveTimer_SetConfig+0x84>
 80054b6:	2b70      	cmp	r3, #112	; 0x70
 80054b8:	d860      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054ba:	2b60      	cmp	r3, #96	; 0x60
 80054bc:	d054      	beq.n	8005568 <TIM_SlaveTimer_SetConfig+0x100>
 80054be:	2b60      	cmp	r3, #96	; 0x60
 80054c0:	d85c      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054c2:	2b50      	cmp	r3, #80	; 0x50
 80054c4:	d046      	beq.n	8005554 <TIM_SlaveTimer_SetConfig+0xec>
 80054c6:	2b50      	cmp	r3, #80	; 0x50
 80054c8:	d858      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d019      	beq.n	8005502 <TIM_SlaveTimer_SetConfig+0x9a>
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d854      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d055      	beq.n	8005582 <TIM_SlaveTimer_SetConfig+0x11a>
 80054d6:	2b30      	cmp	r3, #48	; 0x30
 80054d8:	d850      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d051      	beq.n	8005582 <TIM_SlaveTimer_SetConfig+0x11a>
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d84c      	bhi.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04d      	beq.n	8005582 <TIM_SlaveTimer_SetConfig+0x11a>
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d04b      	beq.n	8005582 <TIM_SlaveTimer_SetConfig+0x11a>
 80054ea:	e047      	b.n	800557c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	f000 f9e6 	bl	80058cc <TIM_ETR_SetConfig>
      break;
 8005500:	e040      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d101      	bne.n	800550e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e03b      	b.n	8005586 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1a      	ldr	r2, [r3, #32]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005534:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	4313      	orrs	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
      break;
 8005552:	e017      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005560:	461a      	mov	r2, r3
 8005562:	f000 f883 	bl	800566c <TIM_TI1_ConfigInputStage>
      break;
 8005566:	e00d      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005574:	461a      	mov	r2, r3
 8005576:	f000 f8e5 	bl	8005744 <TIM_TI2_ConfigInputStage>
      break;
 800557a:	e003      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	75fb      	strb	r3, [r7, #23]
      break;
 8005580:	e000      	b.n	8005584 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8005582:	bf00      	nop
  }

  return status;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	f023 0201 	bic.w	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4a26      	ldr	r2, [pc, #152]	; (8005654 <TIM_TI1_SetConfig+0xc4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d017      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c4:	d013      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4a23      	ldr	r2, [pc, #140]	; (8005658 <TIM_TI1_SetConfig+0xc8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00f      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a22      	ldr	r2, [pc, #136]	; (800565c <TIM_TI1_SetConfig+0xcc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <TIM_TI1_SetConfig+0xd0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <TIM_TI1_SetConfig+0xd4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_TI1_SetConfig+0x5e>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <TIM_TI1_SetConfig+0xd8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <TIM_TI1_SetConfig+0x62>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <TIM_TI1_SetConfig+0x64>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d008      	beq.n	800560a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e003      	b.n	8005612 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	b2db      	uxtb	r3, r3
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f023 030a 	bic.w	r3, r3, #10
 800562c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 030a 	and.w	r3, r3, #10
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40013400 	.word	0x40013400
 8005664:	40014000 	.word	0x40014000
 8005668:	40015000 	.word	0x40015000

0800566c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 030a 	bic.w	r3, r3, #10
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0210 	bic.w	r2, r3, #16
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	b29b      	uxth	r3, r3
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0210 	bic.w	r2, r3, #16
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	031b      	lsls	r3, r3, #12
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005780:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f023 0303 	bic.w	r3, r3, #3
 80057d0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057f4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	031b      	lsls	r3, r3, #12
 8005860:	b29b      	uxth	r3, r3
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f043 0307 	orr.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	021a      	lsls	r2, r3, #8
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2201      	movs	r2, #1
 8005920:	fa02 f303 	lsl.w	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	43db      	mvns	r3, r3
 800592e:	401a      	ands	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	fa01 f303 	lsl.w	r3, r1, r3
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e06d      	b.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a30      	ldr	r2, [pc, #192]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2f      	ldr	r2, [pc, #188]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2d      	ldr	r2, [pc, #180]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d01d      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d018      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a15      	ldr	r2, [pc, #84]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a11      	ldr	r2, [pc, #68]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10c      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40015000 	.word	0x40015000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40014000 	.word	0x40014000

08005a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e040      	b.n	8005b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fb fa32 	bl	8000f38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2224      	movs	r2, #36	; 0x24
 8005ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9fc 	bl	8005ef0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f825 	bl	8005b48 <UART_SetConfig>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e01b      	b.n	8005b40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fa7b 	bl	8006034 <UART_CheckIdleState>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b92      	ldr	r3, [pc, #584]	; (8005dbc <UART_SetConfig+0x274>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	6979      	ldr	r1, [r7, #20]
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a80      	ldr	r2, [pc, #512]	; (8005dc0 <UART_SetConfig+0x278>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d120      	bne.n	8005c06 <UART_SetConfig+0xbe>
 8005bc4:	4b7f      	ldr	r3, [pc, #508]	; (8005dc4 <UART_SetConfig+0x27c>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d817      	bhi.n	8005c00 <UART_SetConfig+0xb8>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x90>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005be9 	.word	0x08005be9
 8005bdc:	08005bf5 	.word	0x08005bf5
 8005be0:	08005bfb 	.word	0x08005bfb
 8005be4:	08005bef 	.word	0x08005bef
 8005be8:	2301      	movs	r3, #1
 8005bea:	77fb      	strb	r3, [r7, #31]
 8005bec:	e0b5      	b.n	8005d5a <UART_SetConfig+0x212>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	77fb      	strb	r3, [r7, #31]
 8005bf2:	e0b2      	b.n	8005d5a <UART_SetConfig+0x212>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	77fb      	strb	r3, [r7, #31]
 8005bf8:	e0af      	b.n	8005d5a <UART_SetConfig+0x212>
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	77fb      	strb	r3, [r7, #31]
 8005bfe:	e0ac      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c00:	2310      	movs	r3, #16
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0a9      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6f      	ldr	r2, [pc, #444]	; (8005dc8 <UART_SetConfig+0x280>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d124      	bne.n	8005c5a <UART_SetConfig+0x112>
 8005c10:	4b6c      	ldr	r3, [pc, #432]	; (8005dc4 <UART_SetConfig+0x27c>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c1c:	d011      	beq.n	8005c42 <UART_SetConfig+0xfa>
 8005c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c22:	d817      	bhi.n	8005c54 <UART_SetConfig+0x10c>
 8005c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c28:	d011      	beq.n	8005c4e <UART_SetConfig+0x106>
 8005c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2e:	d811      	bhi.n	8005c54 <UART_SetConfig+0x10c>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <UART_SetConfig+0xf4>
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d006      	beq.n	8005c48 <UART_SetConfig+0x100>
 8005c3a:	e00b      	b.n	8005c54 <UART_SetConfig+0x10c>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e08b      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c42:	2302      	movs	r3, #2
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e088      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e085      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c4e:	2308      	movs	r3, #8
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e082      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c54:	2310      	movs	r3, #16
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e07f      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a5b      	ldr	r2, [pc, #364]	; (8005dcc <UART_SetConfig+0x284>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d124      	bne.n	8005cae <UART_SetConfig+0x166>
 8005c64:	4b57      	ldr	r3, [pc, #348]	; (8005dc4 <UART_SetConfig+0x27c>)
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c70:	d011      	beq.n	8005c96 <UART_SetConfig+0x14e>
 8005c72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c76:	d817      	bhi.n	8005ca8 <UART_SetConfig+0x160>
 8005c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c7c:	d011      	beq.n	8005ca2 <UART_SetConfig+0x15a>
 8005c7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c82:	d811      	bhi.n	8005ca8 <UART_SetConfig+0x160>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <UART_SetConfig+0x148>
 8005c88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c8c:	d006      	beq.n	8005c9c <UART_SetConfig+0x154>
 8005c8e:	e00b      	b.n	8005ca8 <UART_SetConfig+0x160>
 8005c90:	2300      	movs	r3, #0
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e061      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c96:	2302      	movs	r3, #2
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e05e      	b.n	8005d5a <UART_SetConfig+0x212>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e05b      	b.n	8005d5a <UART_SetConfig+0x212>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	77fb      	strb	r3, [r7, #31]
 8005ca6:	e058      	b.n	8005d5a <UART_SetConfig+0x212>
 8005ca8:	2310      	movs	r3, #16
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e055      	b.n	8005d5a <UART_SetConfig+0x212>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a47      	ldr	r2, [pc, #284]	; (8005dd0 <UART_SetConfig+0x288>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d124      	bne.n	8005d02 <UART_SetConfig+0x1ba>
 8005cb8:	4b42      	ldr	r3, [pc, #264]	; (8005dc4 <UART_SetConfig+0x27c>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc4:	d011      	beq.n	8005cea <UART_SetConfig+0x1a2>
 8005cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cca:	d817      	bhi.n	8005cfc <UART_SetConfig+0x1b4>
 8005ccc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd0:	d011      	beq.n	8005cf6 <UART_SetConfig+0x1ae>
 8005cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd6:	d811      	bhi.n	8005cfc <UART_SetConfig+0x1b4>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <UART_SetConfig+0x19c>
 8005cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce0:	d006      	beq.n	8005cf0 <UART_SetConfig+0x1a8>
 8005ce2:	e00b      	b.n	8005cfc <UART_SetConfig+0x1b4>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e037      	b.n	8005d5a <UART_SetConfig+0x212>
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e034      	b.n	8005d5a <UART_SetConfig+0x212>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e031      	b.n	8005d5a <UART_SetConfig+0x212>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e02e      	b.n	8005d5a <UART_SetConfig+0x212>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e02b      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a33      	ldr	r2, [pc, #204]	; (8005dd4 <UART_SetConfig+0x28c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d124      	bne.n	8005d56 <UART_SetConfig+0x20e>
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <UART_SetConfig+0x27c>)
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005d14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d18:	d011      	beq.n	8005d3e <UART_SetConfig+0x1f6>
 8005d1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d1e:	d817      	bhi.n	8005d50 <UART_SetConfig+0x208>
 8005d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d24:	d011      	beq.n	8005d4a <UART_SetConfig+0x202>
 8005d26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d2a:	d811      	bhi.n	8005d50 <UART_SetConfig+0x208>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <UART_SetConfig+0x1f0>
 8005d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d34:	d006      	beq.n	8005d44 <UART_SetConfig+0x1fc>
 8005d36:	e00b      	b.n	8005d50 <UART_SetConfig+0x208>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	e00d      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	77fb      	strb	r3, [r7, #31]
 8005d42:	e00a      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d44:	2304      	movs	r3, #4
 8005d46:	77fb      	strb	r3, [r7, #31]
 8005d48:	e007      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	77fb      	strb	r3, [r7, #31]
 8005d4e:	e004      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d50:	2310      	movs	r3, #16
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e001      	b.n	8005d5a <UART_SetConfig+0x212>
 8005d56:	2310      	movs	r3, #16
 8005d58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d16b      	bne.n	8005e3c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d838      	bhi.n	8005ddc <UART_SetConfig+0x294>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x228>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005ddd 	.word	0x08005ddd
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005ddd 	.word	0x08005ddd
 8005d8c:	08005ddd 	.word	0x08005ddd
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fd f9fe 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8005d98:	61b8      	str	r0, [r7, #24]
        break;
 8005d9a:	e024      	b.n	8005de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fd fa1c 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8005da0:	61b8      	str	r0, [r7, #24]
        break;
 8005da2:	e020      	b.n	8005de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <UART_SetConfig+0x290>)
 8005da6:	61bb      	str	r3, [r7, #24]
        break;
 8005da8:	e01d      	b.n	8005de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fd f993 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8005dae:	61b8      	str	r0, [r7, #24]
        break;
 8005db0:	e019      	b.n	8005de6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	61bb      	str	r3, [r7, #24]
        break;
 8005db8:	e015      	b.n	8005de6 <UART_SetConfig+0x29e>
 8005dba:	bf00      	nop
 8005dbc:	efff69f3 	.word	0xefff69f3
 8005dc0:	40013800 	.word	0x40013800
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	40004400 	.word	0x40004400
 8005dcc:	40004800 	.word	0x40004800
 8005dd0:	40004c00 	.word	0x40004c00
 8005dd4:	40005000 	.word	0x40005000
 8005dd8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	77bb      	strb	r3, [r7, #30]
        break;
 8005de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d073      	beq.n	8005ed4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	005a      	lsls	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	441a      	add	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d916      	bls.n	8005e36 <UART_SetConfig+0x2ee>
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0e:	d212      	bcs.n	8005e36 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f023 030f 	bic.w	r3, r3, #15
 8005e18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	89fb      	ldrh	r3, [r7, #14]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	89fa      	ldrh	r2, [r7, #14]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e04e      	b.n	8005ed4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	77bb      	strb	r3, [r7, #30]
 8005e3a:	e04b      	b.n	8005ed4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e3c:	7ffb      	ldrb	r3, [r7, #31]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d827      	bhi.n	8005e92 <UART_SetConfig+0x34a>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x300>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	08005e93 	.word	0x08005e93
 8005e58:	08005e83 	.word	0x08005e83
 8005e5c:	08005e93 	.word	0x08005e93
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005e93 	.word	0x08005e93
 8005e68:	08005e8b 	.word	0x08005e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fd f992 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e013      	b.n	8005e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7fd f9b0 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8005e78:	61b8      	str	r0, [r7, #24]
        break;
 8005e7a:	e00f      	b.n	8005e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <UART_SetConfig+0x3a4>)
 8005e7e:	61bb      	str	r3, [r7, #24]
        break;
 8005e80:	e00c      	b.n	8005e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e82:	f7fd f927 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 8005e86:	61b8      	str	r0, [r7, #24]
        break;
 8005e88:	e008      	b.n	8005e9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e8e:	61bb      	str	r3, [r7, #24]
        break;
 8005e90:	e004      	b.n	8005e9c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	77bb      	strb	r3, [r7, #30]
        break;
 8005e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	085a      	lsrs	r2, r3, #1
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	441a      	add	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b0f      	cmp	r3, #15
 8005eba:	d909      	bls.n	8005ed0 <UART_SetConfig+0x388>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec2:	d205      	bcs.n	8005ed0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	e001      	b.n	8005ed4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ee0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	007a1200 	.word	0x007a1200

08005ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01a      	beq.n	8006006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d10a      	bne.n	8006006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	605a      	str	r2, [r3, #4]
  }
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b098      	sub	sp, #96	; 0x60
 8006038:	af02      	add	r7, sp, #8
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006044:	f7fb fa2e 	bl	80014a4 <HAL_GetTick>
 8006048:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d12e      	bne.n	80060b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006060:	2200      	movs	r2, #0
 8006062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f88c 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d021      	beq.n	80060b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	653b      	str	r3, [r7, #80]	; 0x50
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
 8006092:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e6      	bne.n	8006072 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e062      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d149      	bne.n	8006158 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060cc:	2200      	movs	r2, #0
 80060ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f856 	bl	8006184 <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d03c      	beq.n	8006158 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	623b      	str	r3, [r7, #32]
   return(result);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30
 80060fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e011      	b.n	800617c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3758      	adds	r7, #88	; 0x58
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	e04f      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d04b      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800619e:	f7fb f981 	bl	80014a4 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e04e      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d037      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d034      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d031      	beq.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d110      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2208      	movs	r2, #8
 80061e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f838 	bl	800625e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2208      	movs	r2, #8
 80061f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e029      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006210:	d111      	bne.n	8006236 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f81e 	bl	800625e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e00f      	b.n	8006256 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4013      	ands	r3, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	429a      	cmp	r2, r3
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	429a      	cmp	r2, r3
 8006252:	d0a0      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625e:	b480      	push	{r7}
 8006260:	b095      	sub	sp, #84	; 0x54
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006284:	643b      	str	r3, [r7, #64]	; 0x40
 8006286:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800628a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e6      	bne.n	8006266 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e5      	bne.n	8006298 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d118      	bne.n	8006306 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 0310 	bic.w	r3, r3, #16
 80062e8:	647b      	str	r3, [r7, #68]	; 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f2:	61bb      	str	r3, [r7, #24]
 80062f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6979      	ldr	r1, [r7, #20]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e6      	bne.n	80062d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	669a      	str	r2, [r3, #104]	; 0x68
}
 800631a:	bf00      	nop
 800631c:	3754      	adds	r7, #84	; 0x54
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <memset>:
 8006326:	4402      	add	r2, r0
 8006328:	4603      	mov	r3, r0
 800632a:	4293      	cmp	r3, r2
 800632c:	d100      	bne.n	8006330 <memset+0xa>
 800632e:	4770      	bx	lr
 8006330:	f803 1b01 	strb.w	r1, [r3], #1
 8006334:	e7f9      	b.n	800632a <memset+0x4>
	...

08006338 <__libc_init_array>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	4d0d      	ldr	r5, [pc, #52]	; (8006370 <__libc_init_array+0x38>)
 800633c:	4c0d      	ldr	r4, [pc, #52]	; (8006374 <__libc_init_array+0x3c>)
 800633e:	1b64      	subs	r4, r4, r5
 8006340:	10a4      	asrs	r4, r4, #2
 8006342:	2600      	movs	r6, #0
 8006344:	42a6      	cmp	r6, r4
 8006346:	d109      	bne.n	800635c <__libc_init_array+0x24>
 8006348:	4d0b      	ldr	r5, [pc, #44]	; (8006378 <__libc_init_array+0x40>)
 800634a:	4c0c      	ldr	r4, [pc, #48]	; (800637c <__libc_init_array+0x44>)
 800634c:	f000 f818 	bl	8006380 <_init>
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	2600      	movs	r6, #0
 8006356:	42a6      	cmp	r6, r4
 8006358:	d105      	bne.n	8006366 <__libc_init_array+0x2e>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006360:	4798      	blx	r3
 8006362:	3601      	adds	r6, #1
 8006364:	e7ee      	b.n	8006344 <__libc_init_array+0xc>
 8006366:	f855 3b04 	ldr.w	r3, [r5], #4
 800636a:	4798      	blx	r3
 800636c:	3601      	adds	r6, #1
 800636e:	e7f2      	b.n	8006356 <__libc_init_array+0x1e>
 8006370:	080063e0 	.word	0x080063e0
 8006374:	080063e0 	.word	0x080063e0
 8006378:	080063e0 	.word	0x080063e0
 800637c:	080063e4 	.word	0x080063e4

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
